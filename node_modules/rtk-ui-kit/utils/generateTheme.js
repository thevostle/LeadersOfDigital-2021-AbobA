'use strict';

var __assign =
  (void 0 && (void 0).__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

    return __assign.apply(this, arguments);
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var theme_1 = __importDefault(require('../constants/theme'));

var components_1 = require('../constants/components');

var themeUtils_1 = require('./themeUtils');

var generateColorFunction = function generateColorFunction(color) {
  return function (alpha) {
    if (alpha === void 0) {
      alpha = themeUtils_1.defaultAlpha;
    }

    return themeUtils_1.getColor(alpha, color);
  };
};

var generateTheme = function generateTheme(themeName, themeConfig) {
  if (themeConfig) {
    var baseColors_1 = themeConfig.baseColors,
      greyScale_1 = themeConfig.greyScale,
      shape = themeConfig.shape;

    var newBaseColors_1 = __assign({}, theme_1.default[themeName].baseColors);

    if (baseColors_1) {
      Object.keys(baseColors_1).forEach(function (key) {
        newBaseColors_1[key] = generateColorFunction(baseColors_1[key]);
      });
    }

    var newGreyScale_1 = __assign({}, theme_1.default[themeName].greyScale);

    var newTransparent = __assign({}, theme_1.default[themeName].transparent);

    if (greyScale_1) {
      Object.keys(greyScale_1).forEach(function (key) {
        newGreyScale_1[key] = 'rgb(' + greyScale_1[key] + ')';
      });

      if (themeName === components_1.THEMES.light && greyScale_1.black) {
        newTransparent = {
          100: 'rgba(' + greyScale_1.black + ')',
          75: 'rgba(' + greyScale_1.black + ',0.7)',
          50: 'rgba(' + greyScale_1.black + ',0.5)',
          25: 'rgba(' + greyScale_1.black + ',0.25)',
          10: 'rgba(' + greyScale_1.black + ',0.1)',
          5: 'rgba(' + greyScale_1.black + ',0.05)',
        };
      }

      if (themeName === components_1.THEMES.dark && greyScale_1.white) {
        newTransparent = {
          100: 'rgba(' + greyScale_1.white + ',0.9)',
          75: 'rgba(' + greyScale_1.white + ',0.6)',
          50: 'rgba(' + greyScale_1.white + ',0.4)',
          25: 'rgba(' + greyScale_1.white + ',0.25)',
          10: 'rgba(' + greyScale_1.white + ',0.1)',
          5: 'rgba(' + greyScale_1.white + ',0.06)',
        };
      }
    }

    return __assign(__assign({}, theme_1.default[themeName]), {
      baseColors: newBaseColors_1,
      greyScale: newGreyScale_1,
      transparent: newTransparent,
      shape: shape || theme_1.default[themeName].shape,
    });
  }

  return theme_1.default[themeName];
};

exports.default = generateTheme;
