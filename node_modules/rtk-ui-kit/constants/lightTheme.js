'use strict';

var __assign =
  (void 0 && (void 0).__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

    return __assign.apply(this, arguments);
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

exports.lightTheme = void 0;

var themeUtils_1 = require('../utils/themeUtils');

var darkTheme_1 = require('./darkTheme');

var greyScale_1 = require('./greyScale');

var baseColors = {
  primary1: function primary1(alpha) {
    if (alpha === void 0) {
      alpha = themeUtils_1.defaultAlpha;
    }

    return themeUtils_1.getColor(alpha, '119,0,255');
  },
  primary2: function primary2(alpha) {
    if (alpha === void 0) {
      alpha = themeUtils_1.defaultAlpha;
    }

    return themeUtils_1.getColor(alpha, '255,79,18');
  },
  secondary1: function secondary1(alpha) {
    if (alpha === void 0) {
      alpha = themeUtils_1.defaultAlpha;
    }

    return themeUtils_1.getColor(alpha, '41,204,163');
  },
  secondary2: function secondary2(alpha) {
    if (alpha === void 0) {
      alpha = themeUtils_1.defaultAlpha;
    }

    return themeUtils_1.getColor(alpha, '47,154,255');
  },
};

var systemColors = {
  success: function success(alpha) {
    if (alpha === void 0) {
      alpha = themeUtils_1.defaultAlpha;
    }

    return themeUtils_1.getColor(alpha, '0,211,89');
  },
  warning: function warning(alpha) {
    if (alpha === void 0) {
      alpha = themeUtils_1.defaultAlpha;
    }

    return themeUtils_1.getColor(alpha, '255,182,8');
  },
  error: function error(alpha) {
    if (alpha === void 0) {
      alpha = themeUtils_1.defaultAlpha;
    }

    return themeUtils_1.getColor(alpha, '255,12,12');
  },
  info: function info(alpha) {
    if (alpha === void 0) {
      alpha = themeUtils_1.defaultAlpha;
    }

    return themeUtils_1.getColor(alpha, '0,66,237');
  },
};

var transparent = {
  100: 'rgba(16,24,40)',
  75: 'rgba(16,24,40,0.7)',
  50: 'rgba(16,24,40,0.5)',
  25: 'rgba(16,24,40,0.25)',
  10: 'rgba(16,24,40,0.1)',
  5: 'rgba(16,24,40,0.05)',
};

var shadows = {
  bottomS: '0px 0px 8px rgba(28, 41, 61, 0.05), 0px 2px 4px rgba(28, 41, 61, 0.06)',
  bottomM: '0px 0px 16px rgba(28, 41, 61, 0.05), 0px 4px 8px rgba(28, 41, 61, 0.06)',
  bottomL: '0px 0px 20px rgba(28, 41, 61, 0.05), 0px 12px 20px rgba(28, 41, 61, 0.06)',
  bottomXL: '0px 0px 32px rgba(28, 41, 61, 0.05), 0px 32px 32px rgba(28, 41, 61, 0.06)',
  topS: '0px 0px 8px rgba(28, 41, 61, 0.05), 0px -2px 4px rgba(28, 41, 61, 0.06)',
  topM: '0px 0px 16px rgba(28, 41, 61, 0.05), 0px -4px 8px rgba(28, 41, 61, 0.06)',
  topL: '0px 0px 20px rgba(28, 41, 61, 0.05), 0px -12px 20px rgba(28, 41, 61, 0.06)',
  topXL: '0px 0px 32px rgba(28, 41, 61, 0.05), 0px -32px 32px rgba(28, 41, 61, 0.06)',
  control: '0px 0px 1px rgba(28, 41, 61, 0.2), 0px 2px 4px rgba(28, 41, 61, 0.12)',
};

exports.lightTheme = {
  inlineNotifications: __assign({}, systemColors),
  stepper: {
    transparent: {
      default: darkTheme_1.darkTheme.transparent[25],
    },
  },

  numberStepper: {
    textColor: greyScale_1.greyScale.black,
  },

  input: {
    error: systemColors.error(0.8),
    checkmark: greyScale_1.greyScale.black,
  },

  tabs: {
    disabled: {
      accentColor: greyScale_1.greyScale.white,
    },
  },

  chip: {
    background: greyScale_1.greyScale.white,
  },

  tag: {
    background: greyScale_1.greyScale.white,
  },

  dropdownMenu: {
    background: greyScale_1.greyScale.white,
    backgroundGradient: themeUtils_1.getColor(0, '255,255,255'),
  },

  multiselect: {
    error: systemColors.error(0.8),
  },

  select: {
    dropdown: greyScale_1.greyScale.white,
  },

  greyScale: greyScale_1.greyScale,
  baseColors: baseColors,
  shadows: shadows,
  systemColors: systemColors,
  tooltip: {
    backgroundColor: greyScale_1.greyScale.white,
  },

  toastNotifications: greyScale_1.greyScale.white,
  transparent: transparent,
};
