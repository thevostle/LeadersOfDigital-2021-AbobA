'use strict';
var PropTypes = require('prop-types');

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var function_1 = require('../../utils/function');

var useGetBaseColorFromProps_1 = require('../../hooks/useGetBaseColorFromProps');

var useThemeContext_1 = require('../../hooks/useThemeContext');

var constants_1 = require('./constants');

var styles_1 = require('./styles');

var Dropdown_1 = __importDefault(require('./Dropdown/Dropdown'));

var DropdownMenu = function DropdownMenu(props) {
  var themeConfig = useThemeContext_1.useThemeContext().themeConfig;
  var _a = props.color,
    color = _a === void 0 ? constants_1.DEFAULT_COLOR : _a,
    _b = props.shape,
    shape = _b === void 0 ? themeConfig.shape : _b,
    title = props.title,
    _c = props.options,
    options = _c === void 0 ? [] : _c,
    defaultValue = props.defaultValue,
    _d = props.hideOnSelect,
    hideOnSelect = _d === void 0 ? true : _d,
    _e = props.isFitContent,
    isFitContent = _e === void 0 ? false : _e,
    className = props.className,
    style = props.style,
    itemClassName = props.itemClassName,
    itemStyle = props.itemStyle,
    _f = props.onSelect,
    onSelect = _f === void 0 ? function_1.noop : _f,
    _g = props.onClose,
    onClose = _g === void 0 ? function_1.noop : _g,
    children = props.children;

  var _h = react_1.useState(null),
    selected = _h[0],
    setSelected = _h[1];

  var _j = react_1.useState(false),
    isOptionWithIcons = _j[0],
    setIsOptionWithIcons = _j[1];

  var _k = react_1.useState(true),
    isOpen = _k[0],
    setOpen = _k[1];

  var baseColorFromProps = useGetBaseColorFromProps_1.useGetBaseColorFromProps(color);
  var baseColorHintFromProps = useGetBaseColorFromProps_1.useGetBaseColorFromProps(color, 0.5);

  var hideDropdownMenuHandler = function hideDropdownMenuHandler() {
    if (isOpen) {
      setOpen(false);
      onClose();
    }
  };

  var clickHandler = function clickHandler(item) {
    setSelected(item);
    onSelect(item.key);

    if (hideOnSelect) {
      hideDropdownMenuHandler();
    }
  };

  var isSelectedOption = function isSelectedOption(key) {
    return (selected === null || selected === void 0 ? void 0 : selected.key) === key;
  };

  react_1.useEffect(
    function () {
      var item = options.find(function (option) {
        return option.key === defaultValue;
      });
      setSelected(item || null);
    },
    [defaultValue, options]
  );
  react_1.useEffect(
    function () {
      setIsOptionWithIcons(
        options.some(function (option) {
          return !!option.icon;
        })
      );
    },
    [options]
  );
  var dropdownMenuTitle =
    title &&
    react_1.default.createElement(
      styles_1.StyledDropdownMenuHeader,
      {
        variant: 'caption',
        color: 'caption',
        tag: 'div',
        isStatic: true,
      },
      title
    );

  var renderOptionHint = function renderOptionHint(item) {
    return (
      item.hint &&
      react_1.default.createElement(
        styles_1.StyledDropdownMenuOptionText,
        {
          color: 'caption',
          textColor: isSelectedOption(item.key) ? baseColorHintFromProps : undefined,
          variant: 'caption',
          tag: 'div',
          isStatic: true,
        },
        item.hint
      )
    );
  };

  var renderOptionIcon = function renderOptionIcon(itemIcon) {
    return (
      itemIcon &&
      react_1.default.createElement(
        styles_1.StyledDropdownMenuOptionIcon,
        {
          color: baseColorFromProps,
        },
        itemIcon
      )
    );
  };

  var renderOption = function renderOption(item) {
    return react_1.default.createElement(
      styles_1.StyledDropdownMenuOption,
      {
        key: item.key,
        className: itemClassName,
        style: itemStyle,
        onClick: function onClick() {
          return clickHandler(item);
        },
        role: 'option',
      },
      renderOptionIcon(item.icon),
      react_1.default.createElement(
        styles_1.StyledDropdownMenuOptionTextWrapper,
        {
          isOffset: isOptionWithIcons && !item.icon,
        },
        react_1.default.createElement(
          styles_1.StyledDropdownMenuOptionText,
          {
            variant: 'bodyM',
            textColor: isSelectedOption(item.key) ? baseColorFromProps : undefined,
            tag: 'div',
            isStatic: true,
          },
          item.value
        ),
        renderOptionHint(item)
      )
    );
  };

  var dropdownMenuOptions = options.map(function (item) {
    return renderOption(item);
  });
  return react_1.default.createElement(
    Dropdown_1.default,
    {
      isOpen: isOpen,
      shape: shape,
      isFitContent: isFitContent,
      onClose: hideDropdownMenuHandler,
      className: className,
      style: style,
      overlay: children,
    },
    react_1.default.createElement(
      styles_1.StyledDropdownMenu,
      {
        shape: shape,
        isFitContent: isFitContent,
      },
      react_1.default.createElement(
        styles_1.StyledDropdownMenuContainer,
        {
          shape: shape,
        },
        dropdownMenuTitle,
        react_1.default.createElement(
          styles_1.StyledDropdownMenuOptions,
          {
            role: 'listbox',
          },
          dropdownMenuOptions
        )
      )
    )
  );
};

DropdownMenu.propTypes = {
  /**
   * Задает элемент, от которого будет позиционирован дропдаун
   */
  children: PropTypes.oneOfType([
    PropTypes.element,
    PropTypes.object,
    PropTypes.shape({
      key: PropTypes.oneOfType([PropTypes.oneOf([null]), PropTypes.number, PropTypes.string])
        .isRequired,
      props: PropTypes.any.isRequired,
      /**
       * Returns a string containing a number represented in exponential notation.
       * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.
       */
      toExponential: PropTypes.func.isRequired,
      /**
       * Returns a string representing a number in fixed-point notation.
       * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.
       */
      toFixed: PropTypes.func.isRequired,
      /**
       * Returns a date converted to a string using the current locale.
       */
      toLocaleString: PropTypes.func.isRequired,
      /**
       * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.
       * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.
       */
      toPrecision: PropTypes.func.isRequired,
      /**
       * Returns a string representation of an object.
       */
      toString: PropTypes.func.isRequired,
      type: PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.string]).isRequired,
      /**
       * Returns the primitive value of the specified object.
       */
      valueOf: PropTypes.func.isRequired,
    }),
  ]),
  /**
   * Устанавливает дополнительные классы для элемента
   */
  className: PropTypes.string,
  /**
   * Задает основной цвет выбранного элемента
   *  @default "primary2"
   */
  color: PropTypes.oneOf(['primary1', 'primary2', 'secondary1', 'secondary2']),
  /**
   * Задает выбранный элемент по умолчанию
   */
  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /**
   * Задает признак скрывания при выборе элемента
   *  @default true
   */
  hideOnSelect: PropTypes.bool,
  /**
   * По умолчанию меню растягивается по ширине родителя
   *
   *  В значении true меню растягивается по контенту, max-width: 280px
   *  @default false
   */
  isFitContent: PropTypes.bool,
  /**
   * Устанавливает дополнительные классы для элементов меню
   */
  itemClassName: PropTypes.string,
  /**
   * Задает дополнительные стили для элементов меню
   */
  itemStyle: PropTypes.object,
  /**
   * Callback функция, вызываемая при закрытии выпадающего списка
   */
  onClose: PropTypes.func,
  /**
   * Callback функция, вызываемая при выборе значения из списка
   * @param value - ключ выбранного значения из списка
   */
  onSelect: PropTypes.func,
  /**
   * Задает список элементов для выбора
   * @param value - отображаемое значение
   * @param key - уникальный ключ в разрезе списка элементов
   * @param hint - дополнительная подпись
   * @param icon - иконка
   */
  options: PropTypes.arrayOf(
    PropTypes.shape({
      hint: PropTypes.string,
      icon: PropTypes.node,
      key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
      value: PropTypes.node,
    })
  ).isRequired,
  /**
   * Задает скругление, значение по умолчанию берется из темы
   */
  shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
  /**
   * Отображает подсказку для выпадающего списка
   */
  title: PropTypes.string,
};

DropdownMenu.displayName = 'DropdownMenu';
exports.default = DropdownMenu;
