'use strict';
var PropTypes = require('prop-types');

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');

var _typeof2 = _interopRequireDefault(require('@babel/runtime/helpers/typeof'));

var __assign =
  (void 0 && (void 0).__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

    return __assign.apply(this, arguments);
  };

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

var __rest =
  (void 0 && (void 0).__rest) ||
  function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var useCombinedRefs_1 = require('../../hooks/useCombinedRefs');

var useThemeContext_1 = require('../../hooks/useThemeContext');

var useGetBaseColorFromProps_1 = require('../../hooks/useGetBaseColorFromProps');

var useFocus_1 = require('../../hooks/useFocus');

var function_1 = require('../../utils/function');

var components_1 = require('../../constants/components');

var constants_1 = require('./constants');

var styles_1 = require('./styles');

var TextArea = react_1.forwardRef(function TextArea(props, ref) {
  var themeConfig = useThemeContext_1.useThemeContext().themeConfig;

  var value = props.value,
    defaultValue = props.defaultValue,
    _a = props.shape,
    shape = _a === void 0 ? themeConfig.shape : _a,
    _b = props.color,
    color = _b === void 0 ? constants_1.DEFAULT_COLOR : _b,
    error = props.error,
    hint = props.hint,
    label = props.label,
    rows = props.rows,
    maxLength = props.maxLength,
    required = props.required,
    _c = props.disabled,
    disabled = _c === void 0 ? false : _c,
    _d = props.readOnly,
    readOnly = _d === void 0 ? false : _d,
    _e = props.name,
    name = _e === void 0 ? '' : _e,
    _f = props.autoSize,
    autoSize = _f === void 0 ? false : _f,
    id = props.id,
    className = props.className,
    style = props.style,
    _g = props.isFocused,
    textareaFocused = _g === void 0 ? false : _g,
    _h = props.onChange,
    onChange = _h === void 0 ? function_1.noop : _h,
    _j = props.onFocus,
    onPropFocus = _j === void 0 ? function_1.noop : _j,
    _k = props.onBlur,
    onPropsBlur = _k === void 0 ? function_1.noop : _k,
    restProps = __rest(props, [
      'value',
      'defaultValue',
      'shape',
      'color',
      'error',
      'hint',
      'label',
      'rows',
      'maxLength',
      'required',
      'disabled',
      'readOnly',
      'name',
      'autoSize',
      'id',
      'className',
      'style',
      'isFocused',
      'onChange',
      'onFocus',
      'onBlur',
    ]);

  var internalRef = react_1.useRef(null);
  var inputRef = useCombinedRefs_1.useCombinedRefs(ref, internalRef);

  var _l = useFocus_1.useFocus(),
    isFocused = _l.isFocused,
    onBlur = _l.onBlur,
    onFocus = _l.onFocus;

  var baseColorFromProps = useGetBaseColorFromProps_1.useGetBaseColorFromProps(color);

  var _m = react_1.useState(defaultValue),
    textareaValue = _m[0],
    setTextareaValue = _m[1];

  var textLength =
    maxLength &&
    ((textareaValue === null || textareaValue === void 0 ? void 0 : textareaValue.length) ||
      constants_1.DEFAULT_TEXT_LENGTH) +
      '/' +
      maxLength;

  var handleBlur = function handleBlur(event) {
    onBlur();
    onPropsBlur(event);
  };

  var handleChange = function handleChange(event) {
    event.persist();
    onChange(event);
    var newValue = event.target.value;
    setTextareaValue(newValue);
  };

  var handleFocus = function handleFocus(event) {
    onFocus();
    onPropFocus(event);
  };

  var renderFooter = function renderFooter() {
    if (error || hint || textLength) {
      return react_1.default.createElement(
        styles_1.StyledFooter,
        {
          shape: shape,
        },
        react_1.default.createElement(
          styles_1.StyledHint,
          {
            disabled: disabled,
            error: error,
            variant: components_1.TYPOGRAPHY_VARIANTS.caption,
            color: components_1.TYPOGRAPHY_COLORS.caption,
            isStatic: true,
          },
          error || hint
        ),
        textLength &&
          react_1.default.createElement(
            styles_1.StyledTextLength,
            {
              disabled: disabled,
              variant: components_1.TYPOGRAPHY_VARIANTS.caption,
              color: components_1.TYPOGRAPHY_COLORS.caption,
              isStatic: true,
            },
            textLength
          )
      );
    }

    return null;
  };

  react_1.useEffect(
    function () {
      if (value !== undefined && value !== textareaValue) {
        setTextareaValue(value);
      }
    },
    [value, textareaValue]
  );
  var footer = renderFooter();
  var TextAreaComponent = autoSize ? styles_1.StyledTextareaAutosize : styles_1.StyledTextarea;
  var autosizeTextareaProps = (0, _typeof2.default)(autoSize) === 'object' ? autoSize : {};
  return react_1.default.createElement(
    styles_1.StyledRoot,
    {
      id: id,
      className: className,
      style: style,
    },
    react_1.default.createElement(
      styles_1.StyledContainer,
      {
        shape: shape,
        color: baseColorFromProps,
        error: error,
        isFocused: isFocused || textareaFocused,
      },
      react_1.default.createElement(
        TextAreaComponent,
        __assign(
          {},
          restProps,
          {
            ref: inputRef,
            value: textareaValue,
            shape: shape,
            disabled: disabled,
            readOnly: readOnly,
            required: required,
            name: name,
            maxLength: maxLength,
            rows: rows,
            onBlur: handleBlur,
            onChange: handleChange,
            onFocus: handleFocus,
          },
          autosizeTextareaProps
        ),
        textareaValue
      ),
      react_1.default.createElement(
        styles_1.StyledLabel,
        {
          color: baseColorFromProps,
          shape: shape,
          value: textareaValue,
          isFocused: isFocused || textareaFocused,
          disabled: disabled,
          error: error,
        },
        label
      )
    ),
    footer
  );
});

TextArea.propTypes = {
  /**
   * Указывает, будет ли текстовое поле изменять размер в зависимости от количества введенного в него текста
   * @param {number} minRows - минимальное количество строк
   * @param {number} maxRows - максимальное количество строк
   * @default false
   */
  autoSize: PropTypes.oneOfType([
    PropTypes.shape({
      maxRows: PropTypes.number,
      minRows: PropTypes.number,
    }),
    PropTypes.bool,
  ]),
  /**
   * Задает дополнительные классы для компонента
   */
  className: PropTypes.string,
  /**
   * Задает основной цвет
   *  @default "primary2"
   */
  color: PropTypes.oneOf(['primary1', 'primary2', 'secondary1', 'secondary2']),
  /**
   * Задает значение по умолчанию, для неуправляемых компонентов.
   *  Не используется вместе с value
   */
  defaultValue: PropTypes.string,
  /**
   * Устанавливает атрибут disabled
   */
  disabled: PropTypes.bool,
  /**
   * Отображает ошибку заполнения поля
   */
  error: PropTypes.string,
  /**
   * Отображает подсказку для заполнения поля
   */
  hint: PropTypes.string,
  /**
   * Задает атрибут id для компонента
   */
  id: PropTypes.string,
  /**
   * В значении true компонент будет в фокусе
   * @default false;
   */
  isFocused: PropTypes.bool,
  /**
   * Задает label
   */
  label: PropTypes.string.isRequired,
  /**
   * Устанавливает максимальное число символов
   */
  maxLength: PropTypes.number,
  /**
   * Задает атрибут name для компонента
   */
  name: PropTypes.string,
  /**
   * Callback функция, вызываемая при потере элементом фокуса
   */
  onBlur: PropTypes.func,
  /**
   * Callback функция, вызываемая при изменении значения
   */
  onChange: PropTypes.func,
  /**
   * Callback функция, вызываемая при получении элементом фокуса
   */
  onFocus: PropTypes.func,
  /**
   * Устанавливает атрибут readonly
   */
  readOnly: PropTypes.bool,
  /**
   * Устанавливает атрибут required
   */
  required: PropTypes.bool,
  /**
   * Задает высоту поля в строках текста
   */
  rows: PropTypes.number,
  /**
   * Задает скругление, значение по умолчанию берется из темы
   */
  shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
  /**
   * Задает значение компонента, используется для управляемых компонентов.
   *  Не используется вместе с defaultValue
   */
  value: PropTypes.string,
};

TextArea.displayName = 'TextArea';
exports.default = TextArea;
