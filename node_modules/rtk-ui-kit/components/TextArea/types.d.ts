import { TextareaHTMLAttributes, CSSProperties, RefObject, ChangeEventHandler, FocusEventHandler } from 'react';
import { BaseColorsType, ShapesType } from '../../types/base';
import { ITheme } from '../../types/theme';
export declare type HTMLTextareaProps = TextareaHTMLAttributes<HTMLTextAreaElement>;
export declare type TextAreaAutoSizeParams = {
    maxRows?: number;
    minRows?: number;
};
export interface ITextareaProps {
    /** Задает значение компонента, используется для управляемых компонентов.
     *  Не используется вместе с defaultValue */
    value?: string;
    /** Задает значение по умолчанию, для неуправляемых компонентов.
     *  Не используется вместе с value */
    defaultValue?: string;
    /** Задает скругление, значение по умолчанию берется из темы */
    shape?: ShapesType;
    /** Задает основной цвет
     *  @default "primary2" */
    color?: BaseColorsType;
    /** Отображает ошибку заполнения поля */
    error?: string;
    /** Отображает подсказку для заполнения поля */
    hint?: string;
    /** Задает label */
    label: string;
    /** Задает высоту поля в строках текста */
    rows?: number;
    /** Устанавливает максимальное число символов */
    maxLength?: number;
    /** Устанавливает атрибут required */
    required?: boolean;
    /** Устанавливает атрибут disabled */
    disabled?: boolean;
    /** Устанавливает атрибут readonly */
    readOnly?: boolean;
    /** Задает атрибут name для компонента */
    name?: string;
    /** Указывает, будет ли текстовое поле изменять размер в зависимости от количества введенного в него текста
     * @param {number} minRows - минимальное количество строк
     * @param {number} maxRows - максимальное количество строк
     * @default false
     */
    autoSize?: boolean | TextAreaAutoSizeParams;
    /** Задает атрибут id для компонента */
    id?: string;
    /** Задает дополнительные классы для компонента */
    className?: string;
    /** Задает дополнительные стили для компонента */
    style?: CSSProperties;
    ref?: RefObject<HTMLTextAreaElement>;
    /** В значении true компонент будет в фокусе
     * @default false;
     */
    isFocused?: boolean;
    /** Callback функция, вызываемая при изменении значения */
    onChange?: ChangeEventHandler;
    /** Callback функция, вызываемая при получении элементом фокуса */
    onFocus?: FocusEventHandler;
    /** Callback функция, вызываемая при потере элементом фокуса */
    onBlur?: FocusEventHandler;
}
export declare type StyledTextareaType = Pick<ITextareaProps, 'value' | 'shape' | 'error' | 'disabled'> & {
    theme: ITheme;
    color?: string;
    isFocused?: boolean;
};
