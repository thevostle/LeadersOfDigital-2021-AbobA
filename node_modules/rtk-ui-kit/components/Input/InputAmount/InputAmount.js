'use strict';
var PropTypes = require('prop-types');

var __assign =
  (void 0 && (void 0).__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

    return __assign.apply(this, arguments);
  };

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

var __rest =
  (void 0 && (void 0).__rest) ||
  function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var react_number_format_1 = __importDefault(require('react-number-format'));

var styles_1 = require('../styles');

var InputText_1 = __importDefault(require('../InputText/InputText'));

var useCombinedRefs_1 = require('../../../hooks/useCombinedRefs');

var AmountInputControl = react_1.forwardRef(function AmountInputControl(inputProps, ref) {
  var numberFormat = {
    thousandSeparator: ' ',
    decimalSeparator: ',',
    decimalScale: 2,
    allowedDecimalSeparators: [',', '.'],
  };

  var internalRef = react_1.useRef(null);
  var inputRef = useCombinedRefs_1.useCombinedRefs(ref, internalRef);

  var saveRef = function saveRef(el) {
    inputRef.current = el;
  };

  return react_1.default.createElement(
    react_number_format_1.default,
    __assign(
      {
        customInput: styles_1.StyledInput,
      },
      numberFormat,
      {
        getInputRef: saveRef,
      },
      inputProps
    )
  );
});
var InputAmount = react_1.forwardRef(function InputAmount(props, ref) {
  var transformationRule = props.transformationRule,
    otherProps = __rest(props, ['transformationRule']);

  var defaultTransformationRule = {
    transform: function transform(inputValue) {
      if (inputValue === void 0) {
        inputValue = '';
      }

      return inputValue === ',' ? '0,' : inputValue;
    },
    onBlurTransform: function onBlurTransform(inputValue) {
      if (inputValue.endsWith(',')) return inputValue + '00';
      var decimalPart = inputValue.split(',')[1];
      if (decimalPart && decimalPart.length === 1) return inputValue + '0';
      return inputValue;
    },
  };

  return react_1.default.createElement(
    InputText_1.default,
    __assign(
      {
        inputControl: AmountInputControl,
      },
      otherProps,
      {
        ref: ref,
        transformationRule: __assign(__assign({}, defaultTransformationRule), transformationRule),
      }
    )
  );
});

InputAmount.propTypes = {
  /**
   * Задаёт правила трансформации
   *
   * @param transform - метод, изменяющий значение при вводе
   * @param onBlurTransform - метод, изменяющий значение при потере фокуса
   */
  transformationRule: PropTypes.shape({
    onBlurTransform: PropTypes.func,
    transform: PropTypes.func.isRequired,
  }),
};

exports.default = InputAmount;
