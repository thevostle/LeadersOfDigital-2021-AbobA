'use strict';
var PropTypes = require('prop-types');

var __assign =
  (void 0 && (void 0).__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

    return __assign.apply(this, arguments);
  };

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

var __rest =
  (void 0 && (void 0).__rest) ||
  function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };

var __spreadArray =
  (void 0 && (void 0).__spreadArray) ||
  function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
      to[j] = from[i];
    }

    return to;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var imask_1 = __importDefault(require('imask'));

var InputText_1 = __importDefault(require('../InputText/InputText'));

var constants_1 = require('../InputText/constants');

var useCombinedRefs_1 = require('../../../hooks/useCombinedRefs');

var InputPhone = react_1.forwardRef(function InputPhone(props, ref) {
  var _a = props.validationRules,
    validationRules = _a === void 0 ? [] : _a,
    transformationRule = props.transformationRule,
    _b = props.defaultValidationText,
    defaultValidationText = _b === void 0 ? 'Тут должно быть 11 цифр' : _b,
    otherProps = __rest(props, ['validationRules', 'transformationRule', 'defaultValidationText']);

  var internalRef = react_1.useRef(null);
  var inputRef = useCombinedRefs_1.useCombinedRefs(ref, internalRef);
  var phoneMask = imask_1.default.createMask({
    mask: '{+7} 000 000-00-00',
    overwrite: true,
    prepare: function prepare(appended, masked) {
      if ((appended === '8' || appended === '7') && masked.value === '') {
        return '';
      }

      return appended;
    },
  });

  var defaultValidationRules = [
    {
      error: defaultValidationText,
      validate: function validate(inputValue) {
        return inputValue === '' || (!!phoneMask.resolve(inputValue) && phoneMask.isComplete);
      },
    },
  ];

  var defaultTransformationRule = {
    transform: function transform(inputValue) {
      if (inputValue === void 0) {
        inputValue = '';
      }

      var value = phoneMask.resolve(inputValue);
      value = value === '+7' ? '' : value;
      value = value === '+' ? '+7 ' : value;
      return value;
    },
  };

  var isCaretInFixedPart = function isCaretInFixedPart(current) {
    var caretPos = current.selectionStart || 0;
    return caretPos < constants_1.TEL_MASK_FIXED_PART_LENGTH;
  };

  var isNeedUpdateCaretPosition = function isNeedUpdateCaretPosition(current, val) {
    return !!current && !!val && isCaretInFixedPart(current);
  };

  var denyFocusInMaskFixedPart = function denyFocusInMaskFixedPart(val) {
    var current = inputRef === null || inputRef === void 0 ? void 0 : inputRef.current;

    if (isNeedUpdateCaretPosition(current, val)) {
      current === null || current === void 0
        ? void 0
        : current.setSelectionRange(
            constants_1.TEL_MASK_FIXED_PART_LENGTH,
            constants_1.TEL_MASK_FIXED_PART_LENGTH
          );
    }
  };

  var denyKeyDownInMaskFixedPart = function denyKeyDownInMaskFixedPart(event, val) {
    var current = inputRef === null || inputRef === void 0 ? void 0 : inputRef.current;

    if (
      isNeedUpdateCaretPosition(current, val) &&
      !['ArrowLeft', 'ArrowRight'].includes(event.key)
    ) {
      event.preventDefault();
      event.stopPropagation();
      current === null || current === void 0
        ? void 0
        : current.setSelectionRange(
            constants_1.TEL_MASK_FIXED_PART_LENGTH,
            constants_1.TEL_MASK_FIXED_PART_LENGTH
          );
    }
  };

  return react_1.default.createElement(
    InputText_1.default,
    __assign({}, otherProps, {
      ref: inputRef,
      validationRules: __spreadArray(__spreadArray([], defaultValidationRules), validationRules),
      transformationRule: __assign(__assign({}, defaultTransformationRule), transformationRule),
      onInputClick: denyFocusInMaskFixedPart,
      onInputKeyDown: denyKeyDownInMaskFixedPart,
    })
  );
});

InputPhone.propTypes = {
  /**
   * Текст ошибки валидации
   * @default "Тут должно быть 11 цифр"
   */
  defaultValidationText: PropTypes.string,
  /**
   * Задаёт правила трансформации
   *
   * @param transform - метод, изменяющий значение при вводе
   * @param onBlurTransform - метод, изменяющий значение при потере фокуса
   */
  transformationRule: PropTypes.shape({
    onBlurTransform: PropTypes.func,
    transform: PropTypes.func.isRequired,
  }),
  /**
   * Задаёт правила валидации , а также содержит в себе текст ошибки
   * @param error - текстовое значение ошибки валидации
   * @param validate - метод, валидирующий значение value
   */
  validationRules: PropTypes.arrayOf(
    PropTypes.shape({
      error: PropTypes.string,
      validate: PropTypes.func.isRequired,
    })
  ),
};

exports.default = InputPhone;
