import { InputHTMLAttributes, ReactNode, ChangeEventHandler, FocusEventHandler, CSSProperties, RefObject, KeyboardEvent, ElementType, InvalidEvent } from 'react';
import { IBaseInput } from '../Base/BaseInput/types';
import { ITheme } from '../../types/theme';
import { BaseColorsType, ShapesType } from '../../types/base';
export interface IContainer {
    shape?: ShapesType;
    value?: string | number | readonly string[];
    theme: ITheme;
    color: string;
    disabled: boolean;
    isFocused: boolean;
    error?: string;
}
export interface IInputStyle extends InputHTMLAttributes<HTMLInputElement> {
    theme: ITheme;
    disabled: boolean;
    shape: ShapesType;
    $icon: boolean;
    name?: string;
}
export interface IInputProps {
    /** Задает значение компонента, используется для управляемых компонентов.
     *  Не используется вместе с defaultValue */
    value?: string;
    /** Задает значение по умолчанию, для неуправляемых компонентов.
     *  Не используется вместе с value */
    defaultValue?: string;
    /** Добавляет иконку */
    icon?: ReactNode;
    /** Устанавливает атрибут required */
    required?: boolean;
    /** Устанавливает атрибут name */
    name?: string;
    /** Задает label */
    label: string;
    /** Отображает подсказку для заполнения поля */
    hint?: string;
    /** Callback функция, вызываемая при клике на иконку */
    onClickIcon?: () => void;
    /** Устанавливает атрибут disabled */
    disabled?: boolean;
    /** Отображает ошибку заполнения поля */
    error?: string;
    /** Отображает ошибку во всплывающей подсказке при required={true} */
    titleError?: string;
    /** Callback функция, вызываемая при изменении значения */
    onChange?: ChangeEventHandler;
    /** Callback функция, вызываемая на фокус */
    onFocus?: FocusEventHandler;
    /** Callback функция, вызываемая при потере фокуса */
    onBlur?: FocusEventHandler;
    /** Callback функция, вызываемая при невалидном инпуте и required={true} */
    onInvalid?: (event: InvalidEvent<HTMLInputElement>) => void;
    /** Устанавливает атрибут readonly */
    readOnly?: boolean;
    /** В значении true, при заполнении поля, появится иконка для удаления данных */
    clearable?: boolean;
    /** Задает скругление, значение по умолчанию берется из темы */
    shape?: ShapesType;
    /** Задает основной цвет для инпута
     *  @default "primary2" */
    color?: BaseColorsType;
    /** Задает дополнительные стили для компонента */
    style?: CSSProperties;
    /** Задает дополнительные классы для компонента */
    className?: string;
    ref?: RefObject<HTMLInputElement>;
    /** Задаёт правила валидации , а также содержит в себе текст ошибки
     * @param error - текстовое значение ошибки валидации
     * @param validate - метод, валидирующий значение value
     * */
    validationRules?: ValidationRule[];
    /** Задаёт правила трансформации
     *
     * @param transform - метод, изменяющий значение при вводе
     * @param onBlurTransform - метод, изменяющий значение при потере фокуса
     */
    transformationRule?: TransformationRule;
    onInputClick?: (val: string) => void;
    onInputKeyDown?: (event: KeyboardEvent<HTMLInputElement>, val: string) => void;
    /** инпут контрол - по умолчанию StyledInput */
    inputControl?: ElementType;
    /** В значении true компонент будет в фокусе
     * @default false;
     */
    isFocused?: boolean;
    /** Задает type для компонента
     * @default text */
    type?: string;
}
export declare type HintPropsType = {
    disabled: boolean;
    error: boolean;
    theme: ITheme;
    shape: ShapesType;
};
export declare type LabelPropsType = {
    $icon: boolean;
    shape: ShapesType;
    theme: ITheme;
    value?: string | number | readonly string[];
    color: string;
    isFocused: boolean;
    disabled?: boolean;
    error?: string;
};
export declare type IconButtonPropsType = {
    disabled: boolean;
    color: string;
    shape: ShapesType;
    theme: ITheme;
};
export interface ValidationRule {
    error?: string;
    validate: (inputValue: string) => boolean;
}
export interface TransformationRule {
    transform: (inputValue?: string) => string;
    onBlurTransform?: (inputValue: string) => string;
}
export declare type IInputBaseStyledInput = IBaseInput & IInputStyle;
export declare enum FLOAT_LABEL {
    always = "always",
    auto = "auto"
}
export declare type FloatLabelType = keyof typeof FLOAT_LABEL;
export interface IInputPropsExtended extends IInputProps {
    isFocused?: boolean;
    floatLabel?: FloatLabelType;
}
export interface LabelPropsTypeExtended extends LabelPropsType {
    floatLabel?: FloatLabelType;
}
