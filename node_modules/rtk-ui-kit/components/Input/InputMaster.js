'use strict';
var PropTypes = require('prop-types');

var __assign =
  (void 0 && (void 0).__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

    return __assign.apply(this, arguments);
  };

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

var __rest =
  (void 0 && (void 0).__rest) ||
  function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var useFocus_1 = require('../../hooks/useFocus');

var useGetBaseColorFromProps_1 = require('../../hooks/useGetBaseColorFromProps');

var function_1 = require('../../utils/function');

var constants_1 = require('./constants');

var styles_1 = require('./styles');

var types_1 = require('./types');

var useCombinedRefs_1 = require('../../hooks/useCombinedRefs');

var useThemeContext_1 = require('../../hooks/useThemeContext');

var InputControlComp = react_1.forwardRef(function InputControlComp(inputProps, ref) {
  return react_1.default.createElement(
    styles_1.StyledInput,
    __assign(
      {
        ref: ref,
      },
      inputProps
    )
  );
});
var InputMaster = react_1.forwardRef(function InputMaster(props, ref) {
  var themeConfig = useThemeContext_1.useThemeContext().themeConfig;

  var _a = props.onBlur,
    onPropsBlur = _a === void 0 ? function_1.noop : _a,
    _b = props.onFocus,
    onPropFocus = _b === void 0 ? function_1.noop : _b,
    _c = props.onChange,
    onChange = _c === void 0 ? function_1.noop : _c,
    _d = props.onInputClick,
    onInputClick = _d === void 0 ? function_1.noop : _d,
    _e = props.onInputKeyDown,
    onInputKeyDown = _e === void 0 ? function_1.noop : _e,
    _f = props.onClickIcon,
    onClickIcon = _f === void 0 ? function_1.noop : _f,
    error = props.error,
    hint = props.hint,
    label = props.label,
    _g = props.name,
    name = _g === void 0 ? '' : _g,
    required = props.required,
    className = props.className,
    icon = props.icon,
    _h = props.disabled,
    disabled = _h === void 0 ? false : _h,
    _j = props.readOnly,
    readOnly = _j === void 0 ? false : _j,
    clearable = props.clearable,
    _k = props.shape,
    shape = _k === void 0 ? themeConfig.shape : _k,
    _l = props.color,
    color = _l === void 0 ? constants_1.DEFAULT_COLOR : _l,
    inputValue = props.value,
    defaultValue = props.defaultValue,
    style = props.style,
    _m = props.isFocused,
    inputFocused = _m === void 0 ? false : _m,
    _o = props.floatLabel,
    floatLabel = _o === void 0 ? types_1.FLOAT_LABEL.auto : _o,
    _p = props.inputControl,
    InputControl = _p === void 0 ? InputControlComp : _p,
    restProps = __rest(props, [
      'onBlur',
      'onFocus',
      'onChange',
      'onInputClick',
      'onInputKeyDown',
      'onClickIcon',
      'error',
      'hint',
      'label',
      'name',
      'required',
      'className',
      'icon',
      'disabled',
      'readOnly',
      'clearable',
      'shape',
      'color',
      'value',
      'defaultValue',
      'style',
      'isFocused',
      'floatLabel',
      'inputControl',
    ]);

  var internalRef = react_1.useRef(null);
  var inputRef = useCombinedRefs_1.useCombinedRefs(ref, internalRef);

  var _q = useFocus_1.useFocus(),
    isFocused = _q.isFocused,
    onBlur = _q.onBlur,
    onFocus = _q.onFocus;

  var baseColorFromProps = useGetBaseColorFromProps_1.useGetBaseColorFromProps(color);
  var showIcon = !!icon;

  var handleBlur = function handleBlur(event) {
    onBlur();
    onPropsBlur(event);
  };

  var handleFocus = function handleFocus(event) {
    onFocus();
    onPropFocus(event);
  };

  var renderIcon =
    showIcon &&
    react_1.default.createElement(
      styles_1.StyledIconButton,
      {
        shape: shape,
        color: baseColorFromProps,
        disabled: disabled,
        type: 'button',
        onClick: onClickIcon,
        onMouseDown: function_1.preventDefaultFn,
        onTouchStart: function_1.preventDefaultFn,
      },
      icon
    );
  return react_1.default.createElement(
    styles_1.StyledContainer,
    {
      shape: shape,
      error: error,
      value: inputValue,
      disabled: disabled,
      isFocused: isFocused || inputFocused,
      color: baseColorFromProps,
      onTouchStart: function_1.noop,
      className: className,
      style: style,
    },
    react_1.default.createElement(
      InputControl,
      __assign(
        {
          ref: inputRef,
        },
        restProps,
        {
          disabled: disabled,
          name: name,
          value: inputValue,
          readOnly: readOnly,
          required: required,
          onClick: onInputClick,
          onKeyDown: onInputKeyDown,
          onBlur: handleBlur,
          onChange: onChange,
          onFocus: handleFocus,
          shape: shape,
          color: baseColorFromProps,
          $icon: showIcon,
        }
      )
    ),
    react_1.default.createElement(
      styles_1.StyledLabel,
      {
        color: baseColorFromProps,
        $icon: showIcon,
        shape: shape,
        value: inputValue,
        isFocused: isFocused || inputFocused,
        disabled: disabled,
        error: error,
        floatLabel: floatLabel,
      },
      label
    ),
    renderIcon
  );
});

InputMaster.propTypes = {
  /**
   * Задает дополнительные классы для компонента
   */
  className: PropTypes.string,
  /**
   * В значении true, при заполнении поля, появится иконка для удаления данных
   */
  clearable: PropTypes.bool,
  /**
   * Задает основной цвет для инпута
   *  @default "primary2"
   */
  color: PropTypes.oneOf(['primary1', 'primary2', 'secondary1', 'secondary2']),
  /**
   * Задает значение по умолчанию, для неуправляемых компонентов.
   *  Не используется вместе с value
   */
  defaultValue: PropTypes.string,
  /**
   * Устанавливает атрибут disabled
   */
  disabled: PropTypes.bool,
  /**
   * Отображает ошибку заполнения поля
   */
  error: PropTypes.string,
  floatLabel: PropTypes.oneOf(['always', 'auto']),
  /**
   * Отображает подсказку для заполнения поля
   */
  hint: PropTypes.string,
  /**
   * Добавляет иконку
   */
  icon: PropTypes.node,
  /**
   * инпут контрол - по умолчанию StyledInput
   */
  inputControl: PropTypes.oneOfType([
    PropTypes.oneOf([
      'a',
      'abbr',
      'address',
      'animate',
      'animateMotion',
      'animateTransform',
      'area',
      'article',
      'aside',
      'audio',
      'b',
      'base',
      'bdi',
      'bdo',
      'big',
      'blockquote',
      'body',
      'br',
      'button',
      'canvas',
      'caption',
      'circle',
      'cite',
      'clipPath',
      'code',
      'col',
      'colgroup',
      'data',
      'datalist',
      'dd',
      'defs',
      'del',
      'desc',
      'details',
      'dfn',
      'dialog',
      'div',
      'dl',
      'dt',
      'ellipse',
      'em',
      'embed',
      'feBlend',
      'feColorMatrix',
      'feComponentTransfer',
      'feComposite',
      'feConvolveMatrix',
      'feDiffuseLighting',
      'feDisplacementMap',
      'feDistantLight',
      'feDropShadow',
      'feFlood',
      'feFuncA',
      'feFuncB',
      'feFuncG',
      'feFuncR',
      'feGaussianBlur',
      'feImage',
      'feMerge',
      'feMergeNode',
      'feMorphology',
      'feOffset',
      'fePointLight',
      'feSpecularLighting',
      'feSpotLight',
      'feTile',
      'feTurbulence',
      'fieldset',
      'figcaption',
      'figure',
      'filter',
      'footer',
      'foreignObject',
      'form',
      'g',
      'h1',
      'h2',
      'h3',
      'h4',
      'h5',
      'h6',
      'head',
      'header',
      'hgroup',
      'hr',
      'html',
      'i',
      'iframe',
      'image',
      'img',
      'input',
      'ins',
      'kbd',
      'keygen',
      'label',
      'legend',
      'li',
      'line',
      'linearGradient',
      'link',
      'main',
      'map',
      'mark',
      'marker',
      'mask',
      'menu',
      'menuitem',
      'meta',
      'metadata',
      'meter',
      'mpath',
      'nav',
      'noindex',
      'noscript',
      'object',
      'ol',
      'optgroup',
      'option',
      'output',
      'p',
      'param',
      'path',
      'pattern',
      'picture',
      'polygon',
      'polyline',
      'pre',
      'progress',
      'q',
      'radialGradient',
      'rect',
      'rp',
      'rt',
      'ruby',
      's',
      'samp',
      'script',
      'section',
      'select',
      'slot',
      'small',
      'source',
      'span',
      'stop',
      'strong',
      'style',
      'sub',
      'summary',
      'sup',
      'svg',
      'switch',
      'symbol',
      'table',
      'tbody',
      'td',
      'template',
      'text',
      'textarea',
      'textPath',
      'tfoot',
      'th',
      'thead',
      'time',
      'title',
      'tr',
      'track',
      'tspan',
      'u',
      'ul',
      'use',
      'var',
      'video',
      'view',
      'wbr',
      'webview',
    ]),
    PropTypes.func,
    PropTypes.shape({
      childContextTypes: PropTypes.object,
      contextType: PropTypes.shape({
        Consumer: PropTypes.func.isRequired,
        displayName: PropTypes.string,
        Provider: PropTypes.func.isRequired,
      }),
      contextTypes: PropTypes.object,
      defaultProps: PropTypes.object,
      displayName: PropTypes.string,
      getDerivedStateFromError: PropTypes.func,
      getDerivedStateFromProps: PropTypes.func,
      propTypes: PropTypes.object,
    }),
  ]),
  /**
   * В значении true компонент будет в фокусе
   */
  isFocused: PropTypes.bool,
  /**
   * Задает label
   */
  label: PropTypes.string.isRequired,
  /**
   * Устанавливает атрибут name
   */
  name: PropTypes.string,
  /**
   * Callback функция, вызываемая при потере фокуса
   */
  onBlur: PropTypes.func,
  /**
   * Callback функция, вызываемая при изменении значения
   */
  onChange: PropTypes.func,
  /**
   * Callback функция, вызываемая при клике на иконку
   */
  onClickIcon: PropTypes.func,
  /**
   * Callback функция, вызываемая на фокус
   */
  onFocus: PropTypes.func,
  onInputClick: PropTypes.func,
  onInputKeyDown: PropTypes.func,
  /**
   * Устанавливает атрибут readonly
   */
  readOnly: PropTypes.bool,
  /**
   * Устанавливает атрибут required
   */
  required: PropTypes.bool,
  /**
   * Задает скругление, значение по умолчанию берется из темы
   */
  shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
  /**
   * Задает значение компонента, используется для управляемых компонентов.
   *  Не используется вместе с defaultValue
   */
  value: PropTypes.string,
};

exports.default = InputMaster;
