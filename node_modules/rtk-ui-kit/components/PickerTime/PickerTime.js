'use strict';
var PropTypes = require('prop-types');

var __assign =
  (void 0 && (void 0).__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

    return __assign.apply(this, arguments);
  };

var __rest =
  (void 0 && (void 0).__rest) ||
  function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importDefault(require('react'));

var useThemeContext_1 = require('../../hooks/useThemeContext');

var constants_1 = require('../PickerDate/constants');

var CalendarTimes_1 = __importDefault(require('../PickerDate/CalendarTimes/CalendarTimes'));

var styles_1 = require('./styles');

var function_1 = require('../../utils/function');

var PickerTime = function PickerTime(props) {
  var themeConfig = useThemeContext_1.useThemeContext().themeConfig;

  var _a = props.shape,
    shape = _a === void 0 ? themeConfig.shape : _a,
    _b = props.color,
    color = _b === void 0 ? constants_1.DEFAULT_COLOR : _b,
    _c = props.isRange,
    isRange = _c === void 0 ? false : _c,
    activeDate = props.activeDate,
    secondDate = props.secondDate,
    _d = props.onSelect,
    onSelect = _d === void 0 ? function_1.noop : _d,
    className = props.className,
    style = props.style,
    otherProps = __rest(props, [
      'shape',
      'color',
      'isRange',
      'activeDate',
      'secondDate',
      'onSelect',
      'className',
      'style',
    ]);

  return react_1.default.createElement(
    styles_1.StyledPickerTime,
    {
      shape: shape,
      className: className,
      style: style,
    },
    react_1.default.createElement(
      CalendarTimes_1.default,
      __assign(
        {
          shape: shape,
          color: color,
          date: activeDate,
          firstTime: activeDate,
          secondTime: secondDate,
          isRange: isRange,
          onSelect: onSelect,
        },
        otherProps
      )
    )
  );
};

PickerTime.propTypes = {
  /**
   * Значение активной даты по умолчанию
   */
  activeDate: PropTypes.instanceOf(Date),
  /**
   * Задает дополнительные классы
   */
  className: PropTypes.string,
  /**
   * Задает основной цвет
   *  @default "primary2"
   */
  color: PropTypes.oneOf(['primary1', 'primary2', 'secondary1', 'secondary2']),
  /**
   * Дает возможность выбрать период
   *  @default false
   */
  isRange: PropTypes.bool,
  /**
   * Callback функция, вызываемая при изменении значения
   * @param activeDate - выбранная дата
   * @param secondDate - вторая выбранная дата
   */
  onSelect: PropTypes.func,
  /**
   * Значение второй даты по умолчанию (когда isRange = true)
   */
  secondDate: PropTypes.instanceOf(Date),
  /**
   * Задает скругление, значение по умолчанию берется из темы
   */
  shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
};

PickerTime.displayName = 'PickerTime';
exports.default = PickerTime;
