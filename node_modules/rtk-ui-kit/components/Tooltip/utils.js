'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true,
});

exports.isDisabledCompatibleChildren =
  exports.getTooltipArrowOffset =
  exports.getAutoPlacement =
  exports.getBoundingClientRect =
    void 0;

var react_1 = require('react');

var constants_1 = require('./constants');

var components_1 = require('../../constants/components');

var isTopPosition = function isTopPosition(currentTargetTop, tooltipHeight) {
  return currentTargetTop - tooltipHeight > 0;
};

var isBottomPosition = function isBottomPosition(currentTargetBottom, tooltipHeight) {
  return currentTargetBottom + tooltipHeight < window.innerHeight;
};

var isRightPosition = function isRightPosition(currentTargetRight, tooltipWidth) {
  return currentTargetRight + tooltipWidth < window.innerWidth;
};

var isLeftPosition = function isLeftPosition(currentTargetLeft, tooltipWidth) {
  return currentTargetLeft + tooltipWidth > 0;
};

var getBoundingClientRect = function getBoundingClientRect(element) {
  var boundingClientRect =
    element === null || element === void 0 ? void 0 : element.getBoundingClientRect();
  return {
    width: Math.round(
      (boundingClientRect === null || boundingClientRect === void 0
        ? void 0
        : boundingClientRect.width) || 0
    ),
    height: Math.round(
      (boundingClientRect === null || boundingClientRect === void 0
        ? void 0
        : boundingClientRect.height) || 0
    ),
    top: Math.round(
      (boundingClientRect === null || boundingClientRect === void 0
        ? void 0
        : boundingClientRect.top) || 0
    ),
    bottom: Math.round(
      (boundingClientRect === null || boundingClientRect === void 0
        ? void 0
        : boundingClientRect.bottom) || 0
    ),
    left: Math.round(
      (boundingClientRect === null || boundingClientRect === void 0
        ? void 0
        : boundingClientRect.left) || 0
    ),
    right: Math.round(
      (boundingClientRect === null || boundingClientRect === void 0
        ? void 0
        : boundingClientRect.right) || 0
    ),
  };
};

exports.getBoundingClientRect = getBoundingClientRect;

var getAutoPlacement = function getAutoPlacement(currentTargetRect, tooltipRect) {
  var calcPlacement = constants_1.TOOLTIP_PLACEMENTS.top;

  if (isTopPosition(currentTargetRect.top, tooltipRect.height)) {
    calcPlacement = constants_1.TOOLTIP_PLACEMENTS.top;
  } else if (
    isBottomPosition(currentTargetRect.top + currentTargetRect.height, tooltipRect.height)
  ) {
    calcPlacement = constants_1.TOOLTIP_PLACEMENTS.bottom;
  } else if (isRightPosition(currentTargetRect.left + currentTargetRect.width, tooltipRect.width)) {
    calcPlacement = constants_1.TOOLTIP_PLACEMENTS.right;
  } else if (isLeftPosition(currentTargetRect.left, tooltipRect.width)) {
    calcPlacement = constants_1.TOOLTIP_PLACEMENTS.left;
  }

  return calcPlacement;
};

exports.getAutoPlacement = getAutoPlacement;

var getTooltipArrowOffset = function getTooltipArrowOffset(shape) {
  switch (shape) {
    case components_1.SHAPES.geometric:
      return constants_1.ARROW_OFFSET_GEOMETRIC;

    case components_1.SHAPES.rounded:
      return constants_1.ARROW_OFFSET_ROUNDED;

    case components_1.SHAPES.circular:
      return constants_1.ARROW_OFFSET_CIRCULAR;

    default:
      return 0;
  }
};

exports.getTooltipArrowOffset = getTooltipArrowOffset;

var isDisabledCompatibleChildren = function isDisabledCompatibleChildren(element) {
  if (!react_1.isValidElement(element)) {
    return false;
  }

  var elementType = element.type;

  if (
    (elementType.displayName === 'Button' ||
      elementType.displayName === 'IconButton' ||
      element.type === 'button') &&
    element.props.disabled
  ) {
    return true;
  }

  return false;
};

exports.isDisabledCompatibleChildren = isDisabledCompatibleChildren;
