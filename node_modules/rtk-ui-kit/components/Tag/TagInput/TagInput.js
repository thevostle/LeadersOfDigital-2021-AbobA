'use strict';
var PropTypes = require('prop-types');

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var useThemeContext_1 = require('../../../hooks/useThemeContext');

var constants_1 = require('../constants');

var styles_1 = require('./styles');

var TagInput = react_1.forwardRef(function TagInput(props, ref) {
  var themeConfig = useThemeContext_1.useThemeContext().themeConfig;
  var value = props.value,
    _a = props.size,
    size = _a === void 0 ? constants_1.TAG_SIZES.medium : _a,
    _b = props.shape,
    shape = _b === void 0 ? themeConfig.shape : _b,
    className = props.className,
    style = props.style,
    onChange = props.onChange,
    onBlur = props.onBlur,
    onKeyPress = props.onKeyPress;
  return react_1.default.createElement(styles_1.StyledTagInput, {
    type: 'text',
    name: 'tagInput',
    ref: ref,
    className: className,
    style: style,
    disabled: false,
    value: value,
    size: size,
    shape: shape,
    onChange: onChange,
    onBlur: onBlur,
    onKeyPress: onKeyPress,
  });
});

TagInput.propTypes = {
  /**
   * Устанавливает дополнительные классы для элемента
   */
  className: PropTypes.string,
  /**
   * Callback функция, вызываемая при потере фокуса
   */
  onBlur: PropTypes.func.isRequired,
  /**
   * Callback функция, вызываемая при изменении значения
   */
  onChange: PropTypes.func.isRequired,
  /**
   * Callback функция, вызываемая при нажатии на клавишу клавиатуры
   */
  onKeyPress: PropTypes.func.isRequired,
  /**
   * Задает скругление
   */
  shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']).isRequired,
  /**
   * Задает размер
   *  @default "medium"
   */
  size: PropTypes.oneOf(['medium', 'small']).isRequired,
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
  value: PropTypes.string.isRequired,
};

TagInput.displayName = 'TagInput';
exports.default = TagInput;
