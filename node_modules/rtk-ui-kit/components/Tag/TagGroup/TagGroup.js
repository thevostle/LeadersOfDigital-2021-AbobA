'use strict';
var PropTypes = require('prop-types');

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

var __spreadArray =
  (void 0 && (void 0).__spreadArray) ||
  function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
      to[j] = from[i];
    }

    return to;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var function_1 = require('../../../utils/function');

var useThemeContext_1 = require('../../../hooks/useThemeContext');

var TagItem_1 = __importDefault(require('../TagItem/TagItem'));

var TagMore_1 = __importDefault(require('../TagMore/TagMore'));

var TagInput_1 = __importDefault(require('../TagInput/TagInput'));

var constants_1 = require('./constants');

var constants_2 = require('../constants');

var styles_1 = require('./styles');

var TagGroup = function TagGroup(props) {
  var themeConfig = useThemeContext_1.useThemeContext().themeConfig;
  var _a = props.size,
    size = _a === void 0 ? constants_2.TAG_SIZES.medium : _a,
    _b = props.shape,
    shape = _b === void 0 ? themeConfig.shape : _b,
    _c = props.view,
    view = _c === void 0 ? constants_2.TAG_VIEWS.primary : _c,
    _d = props.tags,
    tags = _d === void 0 ? [] : _d,
    _e = props.disabledTags,
    disabledTags = _e === void 0 ? [] : _e,
    _f = props.closable,
    closable = _f === void 0 ? false : _f,
    _g = props.editable,
    editable = _g === void 0 ? false : _g,
    maxSymbols = props.maxSymbols,
    _h = props.editLabel,
    editLabel = _h === void 0 ? constants_1.DEFAULT_TAG_MORE_BUTTON_TEXT : _h,
    className = props.className,
    style = props.style,
    inputClassName = props.inputClassName,
    inputStyle = props.inputStyle,
    itemClassName = props.itemClassName,
    itemStyle = props.itemStyle,
    moreClassName = props.moreClassName,
    moreStyle = props.moreStyle,
    _j = props.onAdd,
    onAdd = _j === void 0 ? function_1.noop : _j,
    _k = props.onRemove,
    onRemove = _k === void 0 ? function_1.noop : _k;
  var inputRef = react_1.useRef(null);

  var _l = react_1.useState(tags),
    groupValue = _l[0],
    setGroupValue = _l[1];

  var _m = react_1.useState(false),
    inputVisible = _m[0],
    setInputVisible = _m[1];

  var _o = react_1.useState(''),
    inputValue = _o[0],
    setInputValue = _o[1];

  var closeHandler = function closeHandler(removedTag, event) {
    event.stopPropagation();
    if (
      disabledTags.some(function (disabledTag) {
        return removedTag.key === disabledTag.key;
      })
    )
      return;
    var tagsArray = groupValue.filter(function (tag) {
      return tag.key !== removedTag.key;
    });
    setGroupValue(tagsArray);
    onRemove(removedTag);
  };

  var showInputHandler = function showInputHandler() {
    setInputVisible(true);
  };

  var inputChangeHandler = function inputChangeHandler(event) {
    var newInputValue = event.target.value;
    setInputValue(newInputValue);
  };

  var inputSubmitHandler = function inputSubmitHandler() {
    var newTagValue = inputValue.trim();

    if (
      newTagValue.length &&
      !groupValue.some(function (gv) {
        return gv.key === newTagValue;
      })
    ) {
      var newTag = {
        key: newTagValue,
        value: newTagValue,
      };

      var newGroupValue = __spreadArray(__spreadArray([], groupValue), [newTag]);

      setGroupValue(newGroupValue);
      onAdd(newTag);
    }

    setInputValue('');
    setInputVisible(false);
  };

  var keyPressHandler = function keyPressHandler(event) {
    if (event.key === 'Enter') {
      inputSubmitHandler();
    }
  };

  react_1.useEffect(
    function () {
      var _a;

      if (inputVisible) {
        (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
      }
    },
    [inputVisible]
  );
  react_1.useEffect(
    function () {
      setGroupValue(tags);
    },
    [tags]
  );
  var editButton =
    !inputVisible && editable
      ? react_1.default.createElement(
          TagMore_1.default,
          {
            className: moreClassName,
            style: moreStyle,
            view: view,
            size: size,
            shape: shape,
            onClick: showInputHandler,
          },
          editLabel
        )
      : null;
  var groupOptions = react_1.useMemo(
    function () {
      return groupValue.map(function (tag) {
        var disableTag = disabledTags.some(function (disabledTag) {
          return disabledTag.key === tag.key;
        });
        return react_1.default.createElement(
          TagItem_1.default,
          {
            key: tag.key,
            view: view,
            size: size,
            shape: shape,
            closable: closable,
            disabled: disableTag,
            maxSymbols: maxSymbols,
            className: itemClassName,
            style: itemStyle,
            onClick: function onClick(e) {
              return closeHandler(tag, e);
            },
          },
          tag.value
        );
      }); // eslint-disable-next-line react-hooks/exhaustive-deps
    },
    [groupValue, shape]
  );
  return react_1.default.createElement(
    styles_1.StyledTagGroup,
    {
      className: className,
      style: style,
    },
    react_1.default.createElement(
      styles_1.StyledTagGroupInner,
      {
        size: size,
      },
      groupOptions,
      inputVisible &&
        react_1.default.createElement(TagInput_1.default, {
          ref: inputRef,
          value: inputValue,
          size: size,
          shape: shape,
          className: inputClassName,
          style: inputStyle,
          onChange: inputChangeHandler,
          onBlur: inputSubmitHandler,
          onKeyPress: keyPressHandler,
        }),
      editButton
    )
  );
};

TagGroup.propTypes = {
  /**
   * Устанавливает дополнительные классы для элемента
   */
  className: PropTypes.string,
  /**
   * Позволяет удалять таги
   *  @default false
   */
  closable: PropTypes.bool,
  /**
   * Список disabled тагов
   * @param value - отображаемое значение
   * @param key - уникальный ключ в списке тагов
   */
  disabledTags: PropTypes.arrayOf(
    PropTypes.shape({
      key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
      value: PropTypes.string.isRequired,
    })
  ),
  /**
   * Позволяет добавлять таги
   *  @default false
   */
  editable: PropTypes.bool,
  /**
   * Задает текст для кнопки добавления нового тага
   */
  editLabel: PropTypes.string,
  /**
   * Устанавливает дополнительные классы для элемента
   */
  inputClassName: PropTypes.string,
  /**
   * Задает дополнительные стили для компонента
   */
  inputStyle: PropTypes.object,
  /**
   * Устанавливает дополнительные классы для элемента
   */
  itemClassName: PropTypes.string,
  /**
   * Задает дополнительные стили для компонента
   */
  itemStyle: PropTypes.object,
  /**
   * Устанавливает ограничение по количеству символов для каждого тага
   */
  maxSymbols: PropTypes.number,
  /**
   * Устанавливает дополнительные классы для элемента
   */
  moreClassName: PropTypes.string,
  /**
   * Задает дополнительные стили для компонента
   */
  moreStyle: PropTypes.object,
  /**
   * Callback функция, вызываемая при добавлении тага
   */
  onAdd: PropTypes.func,
  /**
   * Callback функция, вызываемая при удалении тага
   */
  onRemove: PropTypes.func,
  /**
   * Задает скругление, значение по умолчанию берется из темы
   */
  shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
  /**
   * Задает размер
   *  @default "medium"
   */
  size: PropTypes.oneOf(['medium', 'small']),
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
  /**
   * Список тагов
   * @param value - отображаемое значение
   * @param key - уникальный ключ в списке тагов
   */
  tags: PropTypes.arrayOf(
    PropTypes.shape({
      key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
      value: PropTypes.string.isRequired,
    })
  ).isRequired,
  /**
   * Задает внешний вид
   *  @default "primary"
   */
  view: PropTypes.oneOf(['primary', 'secondary']),
};

TagGroup.displayName = 'TagGroup';
exports.default = TagGroup;
