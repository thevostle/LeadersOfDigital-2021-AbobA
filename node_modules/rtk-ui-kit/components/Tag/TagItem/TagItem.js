'use strict';
var PropTypes = require('prop-types');

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var useThemeContext_1 = require('../../../hooks/useThemeContext');

var navigation_1 = require('../../Icons/static16/navigation');

var constants_1 = require('../constants');

var styles_1 = require('./styles');

var TagItem = react_1.forwardRef(function TagItem(props, ref) {
  var themeConfig = useThemeContext_1.useThemeContext().themeConfig;
  var _a = props.size,
    size = _a === void 0 ? constants_1.TAG_SIZES.medium : _a,
    _b = props.shape,
    shape = _b === void 0 ? themeConfig.shape : _b,
    _c = props.view,
    view = _c === void 0 ? constants_1.TAG_VIEWS.primary : _c,
    closable = props.closable,
    disabled = props.disabled,
    maxSymbols = props.maxSymbols,
    className = props.className,
    style = props.style,
    onClick = props.onClick,
    children = props.children;
  var closeIcon =
    size === constants_1.TAG_SIZES.small
      ? react_1.default.createElement(navigation_1.CloseSmall16, null)
      : react_1.default.createElement(navigation_1.CloseLarge16, null);
  var closeButton = closable
    ? react_1.default.createElement(
        styles_1.StyledTagItemButton,
        {
          disabled: disabled,
          onClick: onClick,
          className: 'tagBtn',
        },
        closeIcon
      )
    : null;
  var text = children;

  if (typeof children === 'string' && maxSymbols) {
    var textEnd = children.length > maxSymbols ? '...' : '';
    text = children.slice(0, maxSymbols) + textEnd;
  }

  return react_1.default.createElement(
    styles_1.StyledTagItem,
    {
      view: view,
      size: size,
      shape: shape,
      disabled: disabled,
      closable: closable,
      className: className,
      style: style,
      ref: ref,
    },
    react_1.default.createElement(
      styles_1.StyledText,
      {
        size: size,
        disabled: disabled,
      },
      text
    ),
    closeButton
  );
});

TagItem.propTypes = {
  /**
   * Текст тага
   */
  children: PropTypes.node,
  /**
   * Устанавливает дополнительные классы для элемента
   */
  className: PropTypes.string,
  /**
   * Устанавливает отображение кнопки для удаления тага
   */
  closable: PropTypes.bool,
  /**
   * Устанавливает атрибут disabled
   */
  disabled: PropTypes.bool,
  /**
   * Устанавливает ограничение по количеству символов для тага
   */
  maxSymbols: PropTypes.number,
  /**
   * Callback функция, вызываемая при клике на значок закрытия
   */
  onClick: PropTypes.func,
  /**
   * Задает скругление, значение по умолчанию берется из темы
   */
  shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
  /**
   * Задает размер
   *  @default "medium"
   */
  size: PropTypes.oneOf(['medium', 'small']),
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
  /**
   * Задает внешний вид
   *  @default "primary"
   */
  view: PropTypes.oneOf(['primary', 'secondary']),
};

TagItem.displayName = 'TagItem';
exports.default = TagItem;
