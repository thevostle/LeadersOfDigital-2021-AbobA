'use strict';
var PropTypes = require('prop-types');

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var function_1 = require('../../../utils/function');

var useThemeContext_1 = require('../../../hooks/useThemeContext');

var components_1 = require('../../../constants/components');

var constants_1 = require('../constants');

var hooks_1 = require('../hooks');

var utils_1 = require('../utils');

var Typography_1 = __importDefault(require('../../Typography/Typography'));

var NotificationCloseButton_1 = __importDefault(
  require('../components/NotificationCloseButton/NotificationCloseButton')
);

var styles_1 = require('../styles');

var styles_2 = require('./styles');

var CustomToastNotification = function CustomToastNotification(props) {
  var themeConfig = useThemeContext_1.useThemeContext().themeConfig;
  var _a = props.shape,
    shape = _a === void 0 ? themeConfig.shape : _a,
    icon = props.icon,
    iconBgColor = props.iconBgColor,
    title = props.title,
    subtitle = props.subtitle,
    _b = props.id,
    id = _b === void 0 ? constants_1.DEFAULT_ID : _b,
    timeout = props.timeout,
    _c = props.actionButtons,
    actionButtons =
      _c === void 0
        ? function () {
            return [];
          }
        : _c,
    _d = props.onOpen,
    onOpen = _d === void 0 ? function_1.noop : _d,
    _e = props.onClose,
    onClose = _e === void 0 ? function_1.noop : _e,
    _f = props.hideCloseButton,
    hideCloseButton = _f === void 0 ? false : _f,
    className = props.className,
    style = props.style,
    _g = props.position,
    position = _g === void 0 ? constants_1.NOTIFICATION_POSITION.topRight : _g;
  var timeoutRef = react_1.useRef();
  var notificationWrapper = react_1.useRef(null);
  var notificationInner = react_1.useRef(null);
  var isOpen = hooks_1.useNotifications({
    onOpen: onOpen,
    onClose: onClose,
  }).isOpen;
  hooks_1.useNotificationsHeight(notificationWrapper.current, notificationInner.current, isOpen);
  var closeNotification = hooks_1.useNotificationsStack().closeNotification;

  var _h = hooks_1.useNotificationsButtons(),
    buttonsHeight = _h.buttonsHeight,
    buttonsRef = _h.buttonsRef;

  var handleCloseToastNotification = react_1.useCallback(
    function () {
      onClose();
      closeNotification(id);
    },
    [onClose, closeNotification, id]
  );
  react_1.useEffect(
    function () {
      if (timeout) {
        timeoutRef.current = setTimeout(handleCloseToastNotification, timeout);
      }

      return function () {
        return clearTimeout(timeoutRef.current);
      };
    },
    [onClose, timeout, id, closeNotification, handleCloseToastNotification]
  );
  var buttons = utils_1.createActionButtons(actionButtons(id));
  var notificationIcon =
    icon &&
    react_1.default.createElement(
      styles_2.StyledToastNotificationIcon,
      null,
      react_1.default.createElement(
        styles_2.StyledToastNotificationIconInner,
        {
          type: iconBgColor,
          shape: shape,
        },
        icon
      )
    );
  var notificationTitle =
    title &&
    react_1.default.createElement(
      Typography_1.default,
      {
        variant: components_1.TYPOGRAPHY_VARIANTS.h4,
        tag: 'h4',
        color: components_1.TYPOGRAPHY_COLORS.main,
      },
      title
    );
  var notificationSubtitle =
    subtitle &&
    react_1.default.createElement(
      Typography_1.default,
      {
        variant: components_1.TYPOGRAPHY_VARIANTS.bodyM,
        tag: 'p',
        color: components_1.TYPOGRAPHY_COLORS.caption,
      },
      subtitle
    );
  var notificationCloseButton =
    !hideCloseButton &&
    react_1.default.createElement(
      styles_2.StyledToastNotificationIcon,
      null,
      react_1.default.createElement(NotificationCloseButton_1.default, {
        onClick: handleCloseToastNotification,
        shape: shape,
      })
    );

  var notificationButtons =
    buttons.length > 0 &&
    react_1.default.createElement(
      styles_2.StyledToastNotificationActionButtons,
      {
        ref: buttonsRef,
      },
      buttons.map(function (elem) {
        return react_1.default.createElement(
          react_1.Fragment,
          {
            key: elem.id,
          },
          elem.button,
          elem.id < buttons.length &&
            react_1.default.createElement(styles_1.StyledNotificationActionButtonDivider, {
              height: buttonsHeight,
            })
        );
      })
    );
  return react_1.default.createElement(
    styles_2.StyledToastNotification,
    {
      shape: shape,
      position: position,
      ref: notificationWrapper,
      className: className,
      style: style,
    },
    react_1.default.createElement(
      styles_2.StyledToastNotificationInner,
      {
        ref: notificationInner,
      },
      notificationIcon,
      react_1.default.createElement(
        styles_2.StyledToastNotificationContent,
        null,
        notificationTitle,
        notificationSubtitle
      ),
      notificationCloseButton,
      notificationButtons
    )
  );
};

CustomToastNotification.propTypes = {
  /**
   * Задает кнопки уведомления
   */
  actionButtons: PropTypes.func,
  /**
   * Задает дополнительные классы для компонента
   */
  className: PropTypes.string,
  /**
   * Прячет кнопку "Закрыть"
   *  @default false
   */
  hideCloseButton: PropTypes.bool,
  /**
   * Задает иконку
   */
  icon: PropTypes.node,
  /**
   * Задает цвет подложки для иконки
   */
  iconBgColor: PropTypes.oneOf([
    'error',
    'info',
    'primary1',
    'primary2',
    'secondary1',
    'secondary2',
    'success',
    'warning',
  ]),
  /**
   * Задает id для компонента
   */
  id: PropTypes.string,
  /**
   * Callback функция, вызываемая при закрытии уведомления
   * @returns {undefined}
   */
  onClose: PropTypes.func,
  /**
   * Callback функция, вызываемая при появлении уведомления
   * @returns {undefined}
   */
  onOpen: PropTypes.func,
  /**
   * Задает расположение уведомления
   */
  position: PropTypes.oneOf([
    'bottomCenter',
    'bottomLeft',
    'bottomRight',
    'topCenter',
    'topLeft',
    'topRight',
  ]),
  /**
   * Задает скругление, значение по умолчанию берется из темы
   */
  shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
  /**
   * Задает подзаголовок уведомления
   */
  subtitle: PropTypes.string,
  /**
   * Задает время в милисекундах, через которое уведомление скроется
   */
  timeout: PropTypes.number,
  /**
   * Задает заголовок уведомления
   */
  title: PropTypes.string,
};

exports.default = CustomToastNotification;
