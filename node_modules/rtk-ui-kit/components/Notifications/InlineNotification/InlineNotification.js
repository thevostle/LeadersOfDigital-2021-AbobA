'use strict';
var PropTypes = require('prop-types');

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importDefault(require('react'));

var components_1 = require('../../../constants/components');

var constants_1 = require('../constants');

var constants_2 = require('./constants');

var useThemeContext_1 = require('../../../hooks/useThemeContext');

var NotificationButton_1 = __importDefault(
  require('../components/NotificationButton/NotificationButton')
);

var CustomInlineNotification_1 = __importDefault(
  require('../CustomInlineNotification/CustomInlineNotification')
);

var InlineNotification = function InlineNotification(props) {
  var themeConfig = useThemeContext_1.useThemeContext().themeConfig;
  var _a = props.type,
    type = _a === void 0 ? components_1.SYSTEM_COLORS.info : _a,
    _b = props.shape,
    shape = _b === void 0 ? themeConfig.shape : _b,
    title = props.title,
    subtitle = props.subtitle,
    _c = props.actionButtons,
    actionButtons = _c === void 0 ? [] : _c,
    onOpen = props.onOpen,
    onClose = props.onClose,
    hideCloseButton = props.hideCloseButton,
    _d = props.id,
    id = _d === void 0 ? constants_1.DEFAULT_ID : _d,
    className = props.className;
  var Icon = constants_2.INLINE_ICON_COMPONENT[type];
  var notificationIcon =
    Icon &&
    react_1.default.createElement(Icon, {
      size: constants_1.ICON_SIZE,
      fill: themeConfig.systemColors[type](),
    });

  var notificationButtons = actionButtons.map(function (button) {
    return react_1.default.createElement(NotificationButton_1.default, {
      id: id,
      text: button.text,
      action: function action() {
        return button.action(id);
      },
    });
  });
  return react_1.default.createElement(CustomInlineNotification_1.default, {
    color: type,
    shape: shape,
    icon: notificationIcon,
    title: title,
    titleColor: components_1.TYPOGRAPHY_COLORS[type],
    subtitle: subtitle,
    actionButtons: notificationButtons,
    onOpen: onOpen,
    onClose: onClose,
    hideCloseButton: hideCloseButton,
    className: className,
  });
};

InlineNotification.propTypes = {
  /**
   * Задает кнопки уведомления
   * @param {string} text - Текст кнопки
   * @param {(id: string) => void} action - Callback функция, вызываемая при клике
   */
  actionButtons: PropTypes.arrayOf(
    PropTypes.shape({
      action: PropTypes.func.isRequired,
      text: PropTypes.string.isRequired,
    })
  ),
  /**
   * Задает дополнительные классы для компонента
   */
  className: PropTypes.string,
  /**
   * Прячет кнопку "Закрыть"
   *  @default false
   */
  hideCloseButton: PropTypes.bool,
  /**
   * Задает id для компонента
   */
  id: PropTypes.string,
  /**
   * Callback функция, вызываемая при закрытии уведомления
   * @returns {undefined}
   */
  onClose: PropTypes.func,
  /**
   * Callback функция, вызываемая при появлении уведомления
   * @returns {undefined}
   */
  onOpen: PropTypes.func,
  /**
   * Задает скругление, значение по умолчанию берется из темы
   */
  shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
  /**
   * Задает подзаголовок уведомления
   */
  subtitle: PropTypes.string,
  /**
   * Задает заголовок уведомления
   */
  title: PropTypes.string,
  /**
   * Задает основной цвет для уведомления
   *  @default "info"
   */
  type: PropTypes.oneOf(['error', 'info', 'success', 'warning']),
};

exports.default = InlineNotification;
