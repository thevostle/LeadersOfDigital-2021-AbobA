'use strict';
var PropTypes = require('prop-types');

var __assign =
  (void 0 && (void 0).__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

    return __assign.apply(this, arguments);
  };

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var BaseInput_1 = __importDefault(require('../../Base/BaseInput/BaseInput'));

var Typography_1 = __importDefault(require('../../Typography/Typography'));

var components_1 = require('../../../constants/components');

var styles_1 = require('./styles');

var context_1 = require('../context/context');

var useGetBaseColorFromProps_1 = require('../../../hooks/useGetBaseColorFromProps');

var function_1 = require('../../../utils/function');

var RadioButton = react_1.forwardRef(function RadioButton(props, ref) {
  var _a = props.color,
    color = _a === void 0 ? components_1.BASE_COLORS.primary2 : _a,
    children = props.children,
    _b = props.disabled,
    disabled = _b === void 0 ? false : _b,
    name = props.name,
    value = props.value,
    inputProps = props.inputProps,
    className = props.className,
    style = props.style;
  var baseColorFromProps = useGetBaseColorFromProps_1.useGetBaseColorFromProps(color);
  var context = react_1.useContext(context_1.RadioGroupContext);
  var _c = context.handleChange,
    handleChange = _c === void 0 ? function_1.noop : _c,
    groupDisabled = context.groupDisabled,
    groupValue = context.groupValue;
  var handleInputChange = react_1.useCallback(
    function (event) {
      handleChange(event.target.value);
    },
    [handleChange]
  );
  var isDisabled = groupDisabled || disabled;
  return react_1.default.createElement(
    styles_1.StyledRadioButton,
    {
      color: baseColorFromProps,
      disabled: isDisabled,
      className: className,
      style: style,
    },
    react_1.default.createElement(
      BaseInput_1.default,
      __assign(
        {
          name: name,
          type: 'radio',
          disabled: isDisabled,
          checked: value === groupValue,
          value: value,
          onChange: handleInputChange,
          ref: ref,
        },
        inputProps
      )
    ),
    react_1.default.createElement(
      styles_1.StyledCheckmark,
      {
        color: baseColorFromProps,
        disabled: isDisabled,
      },
      react_1.default.createElement(
        Typography_1.default,
        {
          color: isDisabled
            ? components_1.TYPOGRAPHY_COLORS.disabled
            : components_1.TYPOGRAPHY_COLORS.main,
          variant: components_1.TYPOGRAPHY_VARIANTS.bodyL,
          tag: 'span',
        },
        children
      )
    )
  );
});

RadioButton.propTypes = {
  children: PropTypes.node,
  /**
   * Задает дополнительные классы
   */
  className: PropTypes.string,
  /**
   * Задает основной цвет для radio
   *  @default "primary2"
   */
  color: PropTypes.oneOf(['primary1', 'primary2', 'secondary1', 'secondary2']),
  /**
   * Устанавливает атрибут disabled
   */
  disabled: PropTypes.bool,
  /**
   * Устанавливает дополнительные props
   */
  inputProps: PropTypes.any,
  /**
   * Задает атрибут name для компонента
   */
  name: PropTypes.string.isRequired,
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
  /**
   * Задает value
   */
  value: PropTypes.string,
};

RadioButton.displayName = 'RadioButton';
exports.default = RadioButton;
