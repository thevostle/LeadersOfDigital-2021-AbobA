'use strict';
var PropTypes = require('prop-types');

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var context_1 = __importDefault(require('../context/context'));

var styles_1 = require('./styles');

var RadioGroup = react_1.forwardRef(function RadioGroup(props, ref) {
  var onChange = props.onChange,
    value = props.value,
    _a = props.disabled,
    disabled = _a === void 0 ? false : _a,
    children = props.children,
    className = props.className,
    style = props.style;

  var _b = react_1.useState(value),
    groupValue = _b[0],
    setGroupValue = _b[1];

  var handleChange = react_1.useCallback(
    function (val) {
      if (onChange && groupValue !== val) {
        onChange(val);
      }

      setGroupValue(val);
    },
    [onChange, groupValue]
  );
  react_1.useEffect(
    function () {
      setGroupValue(value);
    },
    [value]
  );
  return react_1.default.createElement(
    context_1.default,
    {
      value: {
        handleChange: handleChange,
        groupValue: groupValue,
        groupDisabled: disabled,
      },
    },

    react_1.default.createElement(
      styles_1.StyledRadioGroup,
      {
        className: className,
        style: style,
        ref: ref,
      },
      children
    )
  );
});

RadioGroup.propTypes = {
  children: PropTypes.node,
  /**
   * Задает дополнительные классы для группы
   */
  className: PropTypes.string,
  /**
   * Устанавливает атрибут disabled для всей группы
   */
  disabled: PropTypes.bool,
  /**
   * Callback функция, вызываемая при изменении значения
   */
  onChange: PropTypes.func,
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
  /**
   * Устанавливает checked для radio с совпадающим value
   */
  value: PropTypes.string,
};

RadioGroup.displayName = 'RadioGroup';
exports.default = RadioGroup;
