'use strict';
var PropTypes = require('prop-types');

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var styles_1 = require('./styles');

var TabsClassicPanel = react_1.forwardRef(function TabsClassicPanel(props, ref) {
  var children = props.children,
    value = props.value,
    index = props.index,
    className = props.className,
    style = props.style;

  var _a = react_1.useState(false),
    visible = _a[0],
    setVisible = _a[1];

  react_1.useEffect(
    function () {
      if (value === index) {
        setVisible(true);
      } else {
        setVisible(false);
      }
    },
    [value, index]
  );
  return visible
    ? react_1.default.createElement(
        styles_1.StyledTTabsClassicPanel,
        {
          ref: ref,
          role: 'tabpanel',
          tabIndex: 0,
          className: className,
          style: style,
        },
        children
      )
    : null;
});

TabsClassicPanel.propTypes = {
  children: PropTypes.node,
  /**
   * Задает дополнительные классы
   */
  className: PropTypes.string,
  /**
   * Индекс видимой панели таба
   */
  index: PropTypes.string.isRequired,
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
  /**
   * Индекс текущей панели таба
   *  Если value равен index - панель видима
   */
  value: PropTypes.string.isRequired,
};

TabsClassicPanel.displayName = 'TabsClassicPanel';
exports.default = TabsClassicPanel;
