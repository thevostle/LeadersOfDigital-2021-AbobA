'use strict';
var PropTypes = require('prop-types');

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var context_1 = require('../context');

var function_1 = require('../../../utils/function');

var components_1 = require('../../../constants/components');

var constants_1 = require('../constants');

var styles_1 = require('./styles');

var TabsClassicItem = function TabsClassicItem(props) {
  var index = props.index,
    label = props.label,
    icon = props.icon,
    _a = props.iconPosition,
    iconPosition = _a === void 0 ? constants_1.TABS_ICON_POSITIONS.left : _a,
    _b = props.disabled,
    disabled = _b === void 0 ? false : _b,
    className = props.className,
    style = props.style,
    _c = props.onClick,
    onClick = _c === void 0 ? function_1.noop : _c;

  var _d = react_1.useContext(context_1.TabsContext),
    size = _d.size,
    accentColor = _d.accentColor,
    scrollable = _d.scrollable,
    activeIndex = _d.activeIndex,
    disabledGroup = _d.disabledGroup,
    handleChange = _d.handleChange;

  var itemRef = react_1.useRef();
  var isActive = activeIndex === index;
  var isDisabled = disabledGroup || disabled;
  var tabIndex = isActive ? 0 : -1;
  var textSize =
    size === constants_1.TAB_SIZES.small
      ? components_1.TYPOGRAPHY_VARIANTS.accentS
      : components_1.TYPOGRAPHY_VARIANTS.accentM;

  var onClickHandler = function onClickHandler(event) {
    if (!isDisabled) {
      if (handleChange) {
        handleChange(index);
      }

      onClick(event);
    }

    if (scrollable) {
      itemRef.current.scrollIntoView({
        block: 'center',
        inline: 'center',
        behavior: 'smooth',
      });
    }
  };

  return react_1.default.createElement(
    styles_1.StyledTabsClassicItem,
    {
      accentColor: accentColor,
      size: size,
      iconPosition: iconPosition,
      isActive: isActive,
      disabled: isDisabled,
      scrollable: scrollable,
      ref: itemRef,
      onClick: onClickHandler,
      role: 'tab',
      'aria-selected': isActive,
      tabIndex: tabIndex,
      className: className,
      style: style,
    },
    icon && icon,
    react_1.default.createElement(
      styles_1.StyledText,
      {
        scrollable: scrollable,
        variant: textSize,
        tag: 'span',
        isStatic: true,
      },
      label
    )
  );
};

TabsClassicItem.propTypes = {
  /**
   * Задает дополнительные классы
   */
  className: PropTypes.string,
  /**
   * Устанавливает атрибут disabled для таба
   */
  disabled: PropTypes.bool,
  /**
   * Иконка для кнопки таба
   */
  icon: PropTypes.node,
  /**
   * Задает расположение иконки относительно текста
   *  @default "left"
   */
  iconPosition: PropTypes.oneOf(['left', 'right', 'top']),
  /**
   * Индекс текущей кнопки таба
   */
  index: PropTypes.string.isRequired,
  /**
   * Текст кнопки таба
   */
  label: PropTypes.string.isRequired,
  /**
   * Callback функция, вызываемая при изменении значения
   */
  onClick: PropTypes.func,
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
};

TabsClassicItem.displayName = 'TabsClassicItem';
exports.default = TabsClassicItem;
