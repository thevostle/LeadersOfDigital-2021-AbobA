'use strict';
var PropTypes = require('prop-types');

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var useGetBaseColorFromProps_1 = require('../../hooks/useGetBaseColorFromProps');

var stepper_1 = require('../../constants/stepper');

var useThemeContext_1 = require('../../hooks/useThemeContext');

var function_1 = require('../../utils/function');

var AddSmall_1 = __importDefault(require('../Icons/actions/AddSmall'));

var RemoveSmall_1 = __importDefault(require('../Icons/actions/RemoveSmall'));

var constants_1 = require('./constants');

var styles_1 = require('./styles');

var Stepper = function Stepper(props) {
  var _a = useThemeContext_1.useThemeContext(),
    themeName = _a.themeName,
    themeConfig = _a.themeConfig;

  var className = props.className,
    style = props.style,
    color = props.color,
    disabled = props.disabled,
    leftIcon = props.leftIcon,
    rightIcon = props.rightIcon,
    _b = props.size,
    size = _b === void 0 ? constants_1.DEFAULT_SIZE : _b,
    _c = props.shape,
    shape = _c === void 0 ? themeConfig.shape : _c,
    text = props.text,
    onLeftClick = props.onLeftClick,
    onRightClick = props.onRightClick;
  var baseColorFromProps = useGetBaseColorFromProps_1.useGetBaseColorFromProps(color);

  var _d = react_1.useMemo(
      function () {
        var allDisabled = disabled === stepper_1.STEPPER_DISABLED.all;
        return {
          isAllDisabled: allDisabled,
          isLeftDisabled: allDisabled || disabled === stepper_1.STEPPER_DISABLED.left,
          isRightDisabled: allDisabled || disabled === stepper_1.STEPPER_DISABLED.right,
        };
      },
      [disabled]
    ),
    isAllDisabled = _d.isAllDisabled,
    isLeftDisabled = _d.isLeftDisabled,
    isRightDisabled = _d.isRightDisabled;

  var checkedColor = isAllDisabled ? '' : baseColorFromProps;
  var handleLeftClick = react_1.useCallback(
    function () {
      if (onLeftClick && !isLeftDisabled) {
        onLeftClick();
      }
    },
    [onLeftClick, isLeftDisabled]
  );
  var handleRightClick = react_1.useCallback(
    function () {
      if (onRightClick && !isRightDisabled) {
        onRightClick();
      }
    },
    [onRightClick, isRightDisabled]
  );
  return react_1.default.createElement(
    styles_1.StyledStepperContainer,
    {
      className: className,
      style: style,
      color: checkedColor,
      disabled: isAllDisabled,
      size: size,
      shape: shape,
      text: text,
      onTouchStart: function_1.noop,
    },
    react_1.default.createElement(
      styles_1.StyledStepperBtn,
      {
        color: checkedColor,
        currentTheme: themeName,
        disabled: isLeftDisabled,
        shape: shape,
        size: size,
        text: text,
        order: 0,
        onClick: handleLeftClick,
      },
      leftIcon || react_1.default.createElement(RemoveSmall_1.default, null)
    ),
    react_1.default.createElement(
      styles_1.StyledStepperBtn,
      {
        color: checkedColor,
        currentTheme: themeName,
        shape: shape,
        disabled: isRightDisabled,
        size: size,
        text: text,
        order: 2,
        onClick: handleRightClick,
      },
      rightIcon || react_1.default.createElement(AddSmall_1.default, null)
    ),
    text
      ? react_1.default.createElement(
          styles_1.StyledStepperText,
          {
            color: checkedColor,
            currentTheme: themeName,
            disabled: isAllDisabled,
            size: size,
            order: 1,
          },
          text
        )
      : react_1.default.createElement(styles_1.StyledStepperDivider, {
          order: 1,
        })
  );
};

Stepper.propTypes = {
  /**
   * Устанавливает дополнительные классы для элемента
   */
  className: PropTypes.string,
  /**
   * Задает цвет компонента
   */
  color: PropTypes.oneOf(['primary1', 'primary2', 'secondary1', 'secondary2']),
  /**
   * Устанавливает атрибут disabled
   */
  disabled: PropTypes.oneOf(['all', 'left', 'right']),
  /**
   * Устанавливает кастомную иконку для левой кнопки
   */
  leftIcon: PropTypes.node,
  /**
   * Callback функция, вызываемая при нажатии на левую кнопку
   * @returns {undefined}
   */
  onLeftClick: PropTypes.func,
  /**
   * Callback функция, вызываемая при нажатии на правую кнопку
   * @returns {undefined}
   */
  onRightClick: PropTypes.func,
  /**
   * Устанавливает кастомную иконку для правой кнопки
   */
  rightIcon: PropTypes.node,
  /**
   * Задает скругление, значение по умолчанию берется из темы
   */
  shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
  /**
   * Задает размер компонента
   * @default 'medium'
   */
  size: PropTypes.oneOf(['medium', 'small']),
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
  /**
   * Устанавливает текст между кнопок вместо вертикальной черты
   */
  text: PropTypes.string,
};

Stepper.displayName = 'Stepper';
exports.default = Stepper;
