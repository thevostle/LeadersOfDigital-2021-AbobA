'use strict';
var PropTypes = require('prop-types');

var __assign =
  (void 0 && (void 0).__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

    return __assign.apply(this, arguments);
  };

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var react_dom_1 = require('react-dom');

var function_1 = require('../../../utils/function');

var useThemeContext_1 = require('../../../hooks/useThemeContext');

var constants_1 = require('./constants');

var styles_1 = require('./styles');

var Overlay_1 = __importDefault(require('../../Overlay/Overlay'));

var FloatingActionMenuItem_1 = __importDefault(
  require('../FloatingActionMenuItem/FloatingActionMenuItem')
);

var CloseSmall_1 = __importDefault(require('../../Icons/navigation/CloseSmall'));

var FABRoot = typeof window !== 'undefined' ? document.createElement('div') : null;

var FloatingActionButton = function FloatingActionButton(props) {
  var themeConfig = useThemeContext_1.useThemeContext().themeConfig;
  var icon = props.icon,
    iconColor = props.iconColor,
    _a = props.iconPosition,
    iconPosition = _a === void 0 ? constants_1.DEFAULT_ICON_POSIION : _a,
    color = props.color,
    _b = props.shape,
    shape = _b === void 0 ? themeConfig.shape : _b,
    text = props.text,
    menu = props.menu,
    overlayView = props.overlayView,
    className = props.className,
    style = props.style,
    menuClassName = props.menuClassName,
    menuStyle = props.menuStyle,
    _c = props.useInPortal,
    useInPortal = _c === void 0 ? true : _c,
    _d = props.onClick,
    onClick = _d === void 0 ? function_1.noop : _d,
    _e = props.onClickOverlay,
    onClickOverlay = _e === void 0 ? function_1.noop : _e;

  var _f = react_1.useState(false),
    isOpen = _f[0],
    setIsOpen = _f[1];

  react_1.useEffect(
    function () {
      if (FABRoot && useInPortal) {
        document.body.appendChild(FABRoot);
      }

      return function () {
        if (FABRoot && document.body.contains(FABRoot)) {
          document.body.removeChild(FABRoot);
        }
      };
    },
    [useInPortal]
  );
  var overlay =
    overlayView &&
    react_1.default.createElement(Overlay_1.default, {
      view: overlayView,
      onClick: onClickOverlay,
      show: isOpen,
      useInPortal: false,
    });

  var buttonIcon = isOpen ? react_1.default.createElement(CloseSmall_1.default, null) : icon;
  var menuContent =
    (menu === null || menu === void 0 ? void 0 : menu.length) &&
    isOpen &&
    react_1.default.createElement(
      styles_1.StyledFloatingActionMenu,
      {
        className: menuClassName,
        style: menuStyle,
      },
      menu === null || menu === void 0
        ? void 0
        : menu.map(function (item) {
            return react_1.default.createElement(
              FloatingActionMenuItem_1.default,
              __assign({}, item, {
                key: item.key,
                color: color,
                shape: shape,
                text: item.text,
                icon: item.icon,
                tag: item.tag,
                onItemClick: function onItemClick() {
                  setIsOpen(false);

                  if (item.onItemClick) {
                    item.onItemClick();
                  }
                },
              })
            );
          })
    );

  var clickHandler = function clickHandler() {
    if (menu) {
      setIsOpen(!isOpen);
    }

    onClick();
  };

  var FABContent = react_1.default.createElement(
    react_1.default.Fragment,
    null,
    overlay,
    react_1.default.createElement(
      styles_1.StyledFloatingActionButtonWrapper,
      {
        className: className,
        style: style,
      },
      react_1.default.createElement(
        styles_1.StyledFloatingActionButton,
        {
          color: color,
          icon: buttonIcon,
          $iconColor: iconColor,
          iconPosition: iconPosition,
          $isMenuOpen: isOpen,
          shape: shape,
          text: text,
          onClick: clickHandler,
        },
        text
      ),
      menuContent
    )
  );
  return useInPortal && FABRoot ? react_dom_1.createPortal(FABContent, FABRoot) : FABContent;
};

FloatingActionButton.propTypes = {
  /**
   * Задает дополнительные классы для компонента
   */
  className: PropTypes.string,
  /**
   * Задает основной цвет
   */
  color: PropTypes.oneOf(['primary1', 'primary2', 'secondary1', 'secondary2']),
  /**
   * Задает иконку кнопки
   */
  icon: PropTypes.node,
  /**
   * Задает цвет иконки кнопки
   */
  iconColor: PropTypes.string,
  /**
   * Задает расположение иконки относительно текста
   *  @default "left"
   */
  iconPosition: PropTypes.oneOf(['left', 'right']),
  /**
   * Задает пункты меню. Массив объектов
   * @param key - ключ пункта меню
   * @param text - текст пункта меню
   * @param icon - иконка пункта меню
   * @param tag - tag пункта меню. default tag - "a"
   */
  menu: PropTypes.arrayOf(
    PropTypes.shape({
      icon: PropTypes.node,
      key: PropTypes.string.isRequired,
      /**
       * Задает тег для пункта меню (React.ElementType)
       *  @default "a"
       */
      tag: PropTypes.oneOfType([
        PropTypes.oneOf([
          'a',
          'abbr',
          'address',
          'animate',
          'animateMotion',
          'animateTransform',
          'area',
          'article',
          'aside',
          'audio',
          'b',
          'base',
          'bdi',
          'bdo',
          'big',
          'blockquote',
          'body',
          'br',
          'button',
          'canvas',
          'caption',
          'circle',
          'cite',
          'clipPath',
          'code',
          'col',
          'colgroup',
          'data',
          'datalist',
          'dd',
          'defs',
          'del',
          'desc',
          'details',
          'dfn',
          'dialog',
          'div',
          'dl',
          'dt',
          'ellipse',
          'em',
          'embed',
          'feBlend',
          'feColorMatrix',
          'feComponentTransfer',
          'feComposite',
          'feConvolveMatrix',
          'feDiffuseLighting',
          'feDisplacementMap',
          'feDistantLight',
          'feDropShadow',
          'feFlood',
          'feFuncA',
          'feFuncB',
          'feFuncG',
          'feFuncR',
          'feGaussianBlur',
          'feImage',
          'feMerge',
          'feMergeNode',
          'feMorphology',
          'feOffset',
          'fePointLight',
          'feSpecularLighting',
          'feSpotLight',
          'feTile',
          'feTurbulence',
          'fieldset',
          'figcaption',
          'figure',
          'filter',
          'footer',
          'foreignObject',
          'form',
          'g',
          'h1',
          'h2',
          'h3',
          'h4',
          'h5',
          'h6',
          'head',
          'header',
          'hgroup',
          'hr',
          'html',
          'i',
          'iframe',
          'image',
          'img',
          'input',
          'ins',
          'kbd',
          'keygen',
          'label',
          'legend',
          'li',
          'line',
          'linearGradient',
          'link',
          'main',
          'map',
          'mark',
          'marker',
          'mask',
          'menu',
          'menuitem',
          'meta',
          'metadata',
          'meter',
          'mpath',
          'nav',
          'noindex',
          'noscript',
          'object',
          'ol',
          'optgroup',
          'option',
          'output',
          'p',
          'param',
          'path',
          'pattern',
          'picture',
          'polygon',
          'polyline',
          'pre',
          'progress',
          'q',
          'radialGradient',
          'rect',
          'rp',
          'rt',
          'ruby',
          's',
          'samp',
          'script',
          'section',
          'select',
          'slot',
          'small',
          'source',
          'span',
          'stop',
          'strong',
          'style',
          'sub',
          'summary',
          'sup',
          'svg',
          'switch',
          'symbol',
          'table',
          'tbody',
          'td',
          'template',
          'text',
          'textarea',
          'textPath',
          'tfoot',
          'th',
          'thead',
          'time',
          'title',
          'tr',
          'track',
          'tspan',
          'u',
          'ul',
          'use',
          'var',
          'video',
          'view',
          'wbr',
          'webview',
        ]),
        PropTypes.func,
        PropTypes.shape({
          childContextTypes: PropTypes.object,
          contextType: PropTypes.shape({
            Consumer: PropTypes.func.isRequired,
            displayName: PropTypes.string,
            Provider: PropTypes.func.isRequired,
          }),
          contextTypes: PropTypes.object,
          defaultProps: PropTypes.object,
          displayName: PropTypes.string,
          getDerivedStateFromError: PropTypes.func,
          getDerivedStateFromProps: PropTypes.func,
          propTypes: PropTypes.object,
        }),
      ]),
      text: PropTypes.string,
    })
  ),
  /**
   * Задает дополнительные классы для меню
   */
  menuClassName: PropTypes.string,
  /**
   * Задает дополнительные стили для сеню
   */
  menuStyle: PropTypes.object,
  /**
   * Callback функция, вызываемая при клике
   */
  onClick: PropTypes.func,
  /**
   * Callback функция, вызываемая при клике на Overlay
   */
  onClickOverlay: PropTypes.func,
  /**
   * Задает тип overlay при открытом меню
   */
  overlayView: PropTypes.oneOf(['soft', 'standart']),
  /**
   * Задает скругление, значение по умолчанию берется из темы
   */
  shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
  /**
   * Задает текст кнопки
   */
  text: PropTypes.string,
  /**
   * Задает использование в Portal
   *  @default true
   */
  useInPortal: PropTypes.bool,
};

FloatingActionButton.displayName = 'FloatingActionButton';
exports.default = FloatingActionButton;
