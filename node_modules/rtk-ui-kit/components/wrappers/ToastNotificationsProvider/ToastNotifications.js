'use strict';
var PropTypes = require('prop-types');

var __assign =
  (void 0 && (void 0).__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

    return __assign.apply(this, arguments);
  };

var __rest =
  (void 0 && (void 0).__rest) ||
  function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importDefault(require('react'));

var react_transition_group_1 = require('react-transition-group');

var ToastNotification_1 = __importDefault(
  require('../../Notifications/ToastNotification/ToastNotification')
);

var CustomToastNotification_1 = __importDefault(
  require('../../Notifications/CustomToastNotification/CustomToastNotification')
);

var styles_1 = require('./styles');

var ToastNotifications = function ToastNotifications(props) {
  var position = props.position,
    notifications = props.notifications;
  return react_1.default.createElement(
    styles_1.StyledToastNotifications,
    {
      position: position,
    },
    react_1.default.createElement(
      react_transition_group_1.TransitionGroup,
      {
        component: null,
      },
      notifications.map(function (_a) {
        var isCustom = _a.isCustom,
          notification = __rest(_a, ['isCustom']);

        return react_1.default.createElement(
          react_transition_group_1.CSSTransition,
          {
            key: notification.id,
            mountOnEnter: true,
            unmountOnExit: true,
            timeout: 300,
            classNames: 'toast-notification',
          },
          isCustom
            ? react_1.default.createElement(
                CustomToastNotification_1.default,
                __assign({}, notification)
              )
            : react_1.default.createElement(ToastNotification_1.default, __assign({}, notification))
        );
      })
    )
  );
};

ToastNotifications.propTypes = {
  notifications: PropTypes.arrayOf(
    PropTypes.shape({
      /**
       * Задает кнопки уведомления
       * @param {string} text - Текст кнопки
       * @param {(id: string) => void} action - Callback функция, вызываемая при клике
       */
      actionButtons: PropTypes.arrayOf(
        PropTypes.shape({
          action: PropTypes.func.isRequired,
          text: PropTypes.string.isRequired,
        })
      ),
      /**
       * Задает дополнительные классы для компонента
       */
      className: PropTypes.string,
      /**
       * Прячет кнопку "Закрыть"
       *  @default false
       */
      hideCloseButton: PropTypes.bool,
      /**
       * Задает id для компонента
       */
      id: PropTypes.string,
      isCustom: PropTypes.bool,
      /**
       * Callback функция, вызываемая при закрытии уведомления
       * @returns {undefined}
       */
      onClose: PropTypes.func,
      /**
       * Callback функция, вызываемая при появлении уведомления
       * @returns {undefined}
       */
      onOpen: PropTypes.func,
      /**
       * Задает расположение уведомления
       */
      position: PropTypes.oneOf([
        'bottomCenter',
        'bottomLeft',
        'bottomRight',
        'topCenter',
        'topLeft',
        'topRight',
      ]),
      /**
       * Задает скругление, значение по умолчанию берется из темы
       */
      shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
      /**
       * Задает дополнительные стили для компонента
       */
      style: PropTypes.object,
      /**
       * Задает подзаголовок уведомления
       */
      subtitle: PropTypes.string,
      /**
       * Задает время в милисекундах, через которое уведомление скроется
       */
      timeout: PropTypes.number,
      /**
       * Задает заголовок уведомления
       */
      title: PropTypes.string,
      /**
       * Задает основной цвет для уведомления
       *  @default "info"
       */
      type: PropTypes.oneOf(['error', 'info', 'success', 'warning']),
    })
  ).isRequired,
  position: PropTypes.oneOf([
    'bottomCenter',
    'bottomLeft',
    'bottomRight',
    'topCenter',
    'topLeft',
    'topRight',
  ]).isRequired,
};

exports.default = ToastNotifications;
