'use strict';
var PropTypes = require('prop-types');

var __assign =
  (void 0 && (void 0).__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

    return __assign.apply(this, arguments);
  };

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

var __rest =
  (void 0 && (void 0).__rest) ||
  function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };

var __spreadArray =
  (void 0 && (void 0).__spreadArray) ||
  function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
      to[j] = from[i];
    }

    return to;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var context_1 = __importDefault(require('../context'));

var useThemeContext_1 = require('../../../hooks/useThemeContext');

var constants_1 = require('../constants');

var Chip_1 = __importDefault(require('../Chip/Chip'));

var styles_1 = require('./styles');

var ChipGroup = function ChipGroup(props) {
  var themeConfig = useThemeContext_1.useThemeContext().themeConfig;

  var _a = props.color,
    color = _a === void 0 ? constants_1.DEFAULT_CHIP_COLOR : _a,
    _b = props.shape,
    shape = _b === void 0 ? themeConfig.shape : _b,
    _c = props.view,
    view = _c === void 0 ? constants_1.DEFAULT_CHIP_VIEW : _c,
    chips = props.chips,
    _d = props.selectedChips,
    selectedChips = _d === void 0 ? [] : _d,
    _e = props.disabledChips,
    disabledChips = _e === void 0 ? [] : _e,
    _f = props.showChipTotal,
    showChipTotal = _f === void 0 ? false : _f,
    _g = props.chipTotalLabel,
    chipTotalLabel = _g === void 0 ? constants_1.DEFAULT_CHIP_TOTAL_LABEL : _g,
    itemsContainerProps = props.itemsContainerProps,
    chipsClassName = props.chipsClassName,
    chipsStyle = props.chipsStyle,
    restProps = __rest(props, [
      'color',
      'shape',
      'view',
      'chips',
      'selectedChips',
      'disabledChips',
      'showChipTotal',
      'chipTotalLabel',
      'itemsContainerProps',
      'chipsClassName',
      'chipsStyle',
    ]);

  var _h = react_1.useState(selectedChips),
    groupSelected = _h[0],
    setGroupSelected = _h[1];

  var chipsTotalAmount = react_1.useMemo(
    function () {
      return chips.reduce(function (sum, currentValue) {
        return sum + currentValue.contentItems.length;
      }, 0);
    },
    [chips]
  );
  var changeHandler = react_1.useCallback(
    function (id) {
      if (!id) {
        return;
      }

      var newGroupSelected = __spreadArray([], groupSelected);

      var indexValue = newGroupSelected.findIndex(function (key) {
        return id === key;
      });

      if (indexValue === -1) {
        newGroupSelected.push(id);
      } else {
        newGroupSelected.splice(indexValue, 1);
      }

      setGroupSelected(newGroupSelected);
    },
    [groupSelected]
  );

  var deselectAllHandler = function deselectAllHandler() {
    setGroupSelected([]);
  };

  var chipTotal = react_1.default.createElement(
    Chip_1.default,
    {
      amount: chipsTotalAmount,
      color: color,
      shape: shape,
      view: view,
      selected: groupSelected.length === 0,
      onClick: deselectAllHandler,
    },
    chipTotalLabel
  );
  var chipsOptions = react_1.useMemo(
    function () {
      return chips.map(function (chip) {
        return react_1.default.createElement(
          Chip_1.default,
          {
            id: chip.key,
            key: chip.key,
            className: chipsClassName,
            style: chipsStyle,
            amount: chip.contentItems.length,
            color: color,
            shape: shape,
            view: view,
            selected: groupSelected.includes(chip.key),
            disabled: disabledChips.includes(chip.key),
          },
          chip.value
        );
      }); // eslint-disable-next-line react-hooks/exhaustive-deps
    },
    [chips, shape]
  );
  var itemsContent = react_1.useMemo(
    function () {
      return chips.reduce(function (prevValue, currentValue) {
        if (
          (groupSelected.length === 0 || groupSelected.includes(currentValue.key)) &&
          !disabledChips.includes(currentValue.key)
        ) {
          return __spreadArray(__spreadArray([], prevValue), currentValue.contentItems);
        }

        return __spreadArray([], prevValue);
      }, []);
    },
    [chips, groupSelected, disabledChips]
  );
  return react_1.default.createElement(
    context_1.default,
    {
      value: {
        groupSelected: groupSelected,
        groupDisabled: disabledChips,
        onGroupChange: changeHandler,
      },
    },

    react_1.default.createElement(
      styles_1.StyledChipGroup,
      __assign({}, restProps),
      react_1.default.createElement(
        styles_1.StyledChipGroupInner,
        null,
        showChipTotal && chipTotal,
        chipsOptions
      )
    ),
    react_1.default.createElement(
      styles_1.StyledChipContent,
      __assign({}, itemsContainerProps),
      itemsContent
    )
  );
};

ChipGroup.propTypes = {
  /**
   * Список чипов. Массив объектов
   * @param key - ключ чипа
   * @param value - текст для кнопки чипа
   * @param items - массив сортируемых элементов
   */
  chips: PropTypes.arrayOf(
    PropTypes.shape({
      contentItems: PropTypes.arrayOf(PropTypes.element).isRequired,
      key: PropTypes.string.isRequired,
      value: PropTypes.string.isRequired,
    })
  ).isRequired,
  /**
   * Задает дополнительные стили для чипа
   */
  chipsClassName: PropTypes.string,
  /**
   * Задает дополнительные стили для чипа
   */
  chipsStyle: PropTypes.object,
  /**
   * Добавляет текст для общего чипа
   */
  chipTotalLabel: PropTypes.string,
  /**
   * Задает основной цвет
   *  @default "primary2"
   */
  color: PropTypes.oneOf(['primary1', 'primary2', 'secondary1', 'secondary2']),
  /**
   * Список disabled чипов. Массив с ключами
   * @param key - ключ disabled чипа
   */
  disabledChips: PropTypes.arrayOf(PropTypes.string),
  /**
   * Задает дополнительные props для контента
   */
  itemsContainerProps: PropTypes.any,
  /**
   * Список выбранных чипов. Массив с ключами
   * @param key - ключ selected чипа
   */
  selectedChips: PropTypes.arrayOf(PropTypes.string),
  /**
   * Задает скругление, значение по умолчанию берется из темы
   */
  shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
  /**
   * Добавляет общий чип
   *  @default false
   */
  showChipTotal: PropTypes.bool,
  /**
   * Задает внешний вид
   *  @default "primary"
   */
  view: PropTypes.oneOf(['primary', 'secondary']),
};

ChipGroup.displayName = 'ChipGroup';
exports.default = ChipGroup;
