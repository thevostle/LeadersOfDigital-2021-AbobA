import { CSSProperties } from 'react';
import { BaseColorsType, ShapesType } from '../../types/base';
import { IDropdownMenuItem } from '../DropdownMenu/types';
export interface ISelectMenuItem extends Omit<IDropdownMenuItem, 'icon'> {
}
export interface ISelectProps {
    /** Задает label */
    label: string;
    /** Задает список элементов для выбора
     * @param value - отображаемое значение
     * @param key - уникальный ключ в разрезе списка элементов
     * @param hint - дополнительная подпись
     */
    options: ISelectMenuItem[];
    /** Отображает подсказку для заполнения поля */
    hint?: string;
    /** Задает значение компонента, используется для управляемых компонентов.
     *  Не используется вместе с defaultValue */
    value?: ISelectMenuItem['key'];
    /** Задает значение по умолчанию, для неуправляемых компонентов.
     *  Не используется вместе с value */
    defaultValue?: ISelectMenuItem['key'];
    /** Устанавливает атрибут required */
    required?: boolean;
    /** Устанавливает атрибут disabled */
    disabled?: boolean;
    /** Отображает ошибку заполнения поля */
    error?: string;
    /** Задает скругление, значение по умолчанию берется из темы */
    shape?: ShapesType;
    /** Задает основной цвет для компонента
     *  @default "primary2" */
    color?: BaseColorsType;
    /** Задает первоначально открытое состояние раскрывающегося списка
     * @default false;
     */
    defaultOpen?: boolean;
    /** Задает дополнительные классы для компонента */
    className?: string;
    /** Задает дополнительные стили для компонента */
    style?: CSSProperties;
    /** Задает дополнительные классы для выпадающего меню */
    dropdownClassName?: string;
    /** Задает дополнительные стли для выпадающего меню */
    dropdownStyle?: CSSProperties;
    /** Callback функция, вызываемая при изменении значения */
    onChange?: (value: ISelectMenuItem['key']) => void;
    /** Callback функция, вызываемая на фокус */
    onFocus?: () => void;
    /** Callback функция, вызываемая при потере фокуса */
    onBlur?: () => void;
}
