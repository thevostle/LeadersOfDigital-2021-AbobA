'use strict';
var PropTypes = require('prop-types');

var __assign =
  (void 0 && (void 0).__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

    return __assign.apply(this, arguments);
  };

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

var __rest =
  (void 0 && (void 0).__rest) ||
  function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var constants_1 = require('./constants');

var styles_1 = require('./styles');

var useThemeContext_1 = require('../../hooks/useThemeContext');

var navigation_1 = require('../Icons/navigation');

var DropdownMenu_1 = __importDefault(require('../DropdownMenu/DropdownMenu'));

var function_1 = require('../../utils/function');

var Select = function Select(props) {
  var _a;

  var themeConfig = useThemeContext_1.useThemeContext().themeConfig;

  var _b = props.options,
    options = _b === void 0 ? [] : _b,
    value = props.value,
    _c = props.shape,
    shape = _c === void 0 ? themeConfig.shape : _c,
    _d = props.color,
    color = _d === void 0 ? constants_1.DEFAULT_COLOR : _d,
    defaultValue = props.defaultValue,
    _e = props.disabled,
    disabled = _e === void 0 ? false : _e,
    _f = props.defaultOpen,
    defaultOpen = _f === void 0 ? false : _f,
    _g = props.onChange,
    onChange = _g === void 0 ? function_1.noop : _g,
    _h = props.onFocus,
    onFocus = _h === void 0 ? function_1.noop : _h,
    _j = props.onBlur,
    onBlur = _j === void 0 ? function_1.noop : _j,
    dropdownClassName = props.dropdownClassName,
    dropdownStyle = props.dropdownStyle,
    className = props.className,
    style = props.style,
    restProps = __rest(props, [
      'options',
      'value',
      'shape',
      'color',
      'defaultValue',
      'disabled',
      'defaultOpen',
      'onChange',
      'onFocus',
      'onBlur',
      'dropdownClassName',
      'dropdownStyle',
      'className',
      'style',
    ]);

  var getSelectedItemByKey = function getSelectedItemByKey(key) {
    return options.find(function (item) {
      return item.key === key;
    });
  };

  var ref = react_1.useRef();

  var _k = react_1.useState(defaultOpen),
    isOpen = _k[0],
    setIsOpen = _k[1];

  var _l = react_1.useState(
      defaultValue !== undefined ? getSelectedItemByKey(defaultValue) : undefined
    ),
    selection = _l[0],
    setSelection = _l[1];

  var handleOnSelect = function handleOnSelect(key) {
    onChange(key);

    if (value === undefined) {
      setSelection(getSelectedItemByKey(key));
    }
  };

  react_1.useEffect(
    function () {
      if (value !== undefined) {
        setSelection(getSelectedItemByKey(value));
      } // eslint-disable-next-line react-hooks/exhaustive-deps
    },
    [value]
  );

  var onDropdownClose = function onDropdownClose() {
    setIsOpen(false);
  };

  var renderDropdown =
    isOpen &&
    react_1.default.createElement(DropdownMenu_1.default, {
      options: options,
      shape: shape,
      color: color,
      defaultValue: selection === null || selection === void 0 ? void 0 : selection.key,
      className: dropdownClassName,
      style: dropdownStyle,
      onSelect: handleOnSelect,
      onClose: onDropdownClose,
    });

  var toggleDropdownMenu = function toggleDropdownMenu() {
    if (!disabled) {
      setIsOpen(!isOpen);
    }
  };

  var renderIcon = react_1.default.createElement(
    styles_1.StyledIcon,
    {
      isOpen: isOpen,
    },
    react_1.default.createElement(navigation_1.ChevronDown, null)
  );
  return react_1.default.createElement(
    styles_1.StyledSelect,
    {
      className: className,
      style: style,
    },
    react_1.default.createElement(
      styles_1.StyledSelectInput,
      {
        onClick: toggleDropdownMenu,
      },
      react_1.default.createElement(
        styles_1.StyledSelectInputText,
        __assign(
          {
            shape: shape,
            color: color,
            value:
              ((_a = selection === null || selection === void 0 ? void 0 : selection.value) ===
                null || _a === void 0
                ? void 0
                : _a.toString()) || '',
            icon: renderIcon,
            disabled: disabled,
            onFocus: onFocus,
            onBlur: onBlur,
            ref: ref,
          },
          restProps
        )
      )
    ),
    renderDropdown
  );
};

Select.propTypes = {
  /**
   * Задает дополнительные классы для компонента
   */
  className: PropTypes.string,
  /**
   * Задает основной цвет для компонента
   *  @default "primary2"
   */
  color: PropTypes.oneOf(['primary1', 'primary2', 'secondary1', 'secondary2']),
  /**
   * Задает первоначально открытое состояние раскрывающегося списка
   * @default false;
   */
  defaultOpen: PropTypes.bool,
  /**
   * Задает значение по умолчанию, для неуправляемых компонентов.
   *  Не используется вместе с value
   */
  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /**
   * Устанавливает атрибут disabled
   */
  disabled: PropTypes.bool,
  /**
   * Задает дополнительные классы для выпадающего меню
   */
  dropdownClassName: PropTypes.string,
  /**
   * Задает дополнительные стли для выпадающего меню
   */
  dropdownStyle: PropTypes.object,
  /**
   * Callback функция, вызываемая при потере фокуса
   */
  onBlur: PropTypes.func,
  /**
   * Callback функция, вызываемая при изменении значения
   */
  onChange: PropTypes.func,
  /**
   * Callback функция, вызываемая на фокус
   */
  onFocus: PropTypes.func,
  /**
   * Задает список элементов для выбора
   * @param value - отображаемое значение
   * @param key - уникальный ключ в разрезе списка элементов
   * @param hint - дополнительная подпись
   */
  options: PropTypes.arrayOf(
    PropTypes.shape({
      hint: PropTypes.string,
      key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
      value: PropTypes.node,
    })
  ).isRequired,
  /**
   * Задает скругление, значение по умолчанию берется из темы
   */
  shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
  /**
   * Задает значение компонента, используется для управляемых компонентов.
   *  Не используется вместе с defaultValue
   */
  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
};

Select.displayName = 'Select';
exports.default = Select;
