'use strict';
var PropTypes = require('prop-types');

var __assign =
  (void 0 && (void 0).__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

    return __assign.apply(this, arguments);
  };

var __rest =
  (void 0 && (void 0).__rest) ||
  function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importDefault(require('react'));

var useGetBaseColorFromProps_1 = require('../../../hooks/useGetBaseColorFromProps');

var useGetTransparentColorFromProps_1 = require('../../../hooks/useGetTransparentColorFromProps');

var useThemeContext_1 = require('../../../hooks/useThemeContext');

var components_1 = require('../../../constants/components');

var constants_1 = require('./constants');

var styles_1 = require('./styles');

var Button = function Button(props) {
  var themeConfig = useThemeContext_1.useThemeContext().themeConfig;

  var _a = props.color,
    color = _a === void 0 ? components_1.BASE_COLORS.primary2 : _a,
    _b = props.size,
    size = _b === void 0 ? components_1.SIZES.medium : _b,
    _c = props.shape,
    shape = _c === void 0 ? themeConfig.shape : _c,
    _d = props.view,
    view = _d === void 0 ? components_1.BUTTON_VIEWS.primary : _d,
    icon = props.icon,
    _e = props.iconPosition,
    iconPosition = _e === void 0 ? components_1.ICON_POSITIONS.left : _e,
    children = props.children,
    restProps = __rest(props, [
      'color',
      'size',
      'shape',
      'view',
      'icon',
      'iconPosition',
      'children',
    ]);

  var renderText = function renderText() {
    if (iconPosition === components_1.ICON_POSITIONS.left) {
      return react_1.default.createElement(
        react_1.default.Fragment,
        null,
        icon,
        react_1.default.createElement(
          styles_1.StyledText,
          {
            variant: constants_1.buttonSizeMap[size],
            tag: 'span',
            isStatic: true,
          },
          children
        )
      );
    }

    return react_1.default.createElement(
      react_1.default.Fragment,
      null,
      react_1.default.createElement(
        styles_1.StyledText,
        {
          variant: constants_1.buttonSizeMap[size],
          tag: 'span',
          isStatic: true,
        },
        children
      ),
      icon
    );
  };

  var baseColorFromProps = useGetBaseColorFromProps_1.useGetBaseColorFromProps(color);
  var hoverTransparentColor = useGetTransparentColorFromProps_1.useGetTransparentColorFromProps(
    color,
    5
  );
  var activeTransparentColor = useGetTransparentColorFromProps_1.useGetTransparentColorFromProps(
    color,
    10
  );
  var buttonText = renderText();
  return react_1.default.createElement(
    styles_1.StyledButton,
    __assign(
      {
        color: baseColorFromProps,
        colorhover: hoverTransparentColor,
        coloractive: activeTransparentColor,
        size: size,
        shape: shape,
        view: view,
      },
      restProps
    ),
    buttonText
  );
};

Button.propTypes = {
  children: PropTypes.node,
  /**
   * Задает основной цвет для кнопки
   *  @default "primary2"
   */
  color: PropTypes.oneOf(['primary1', 'primary2', 'secondary1', 'secondary2']),
  /**
   * Иконка для кнопки
   */
  icon: PropTypes.node,
  /**
   * Задает расположение иконки относительно текста
   *  @default "left"
   */
  iconPosition: PropTypes.oneOf(['left', 'right']),
  /**
   * Задает скругление, значение по умолчанию берется из темы
   */
  shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
  /**
   * Задает размер
   *  @default "medium"
   */
  size: PropTypes.oneOf(['large', 'medium', 'small']),
  /**
   * Задает внешний вид
   *  @default "primary"
   */
  view: PropTypes.oneOf(['ghost', 'outline', 'primary']),
};

Button.displayName = 'Button';
exports.default = Button;
