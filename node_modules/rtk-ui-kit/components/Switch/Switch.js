'use strict';
var PropTypes = require('prop-types');

var __assign =
  (void 0 && (void 0).__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

    return __assign.apply(this, arguments);
  };

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

var __rest =
  (void 0 && (void 0).__rest) ||
  function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var function_1 = require('../../utils/function');

var components_1 = require('../../constants/components');

var useThemeContext_1 = require('../../hooks/useThemeContext');

var useGetBaseColorFromProps_1 = require('../../hooks/useGetBaseColorFromProps');

var Typography_1 = __importDefault(require('../Typography/Typography'));

var styles_1 = require('./styles');

var constants_1 = require('./constants');

var Switch = react_1.forwardRef(function Switch(props, ref) {
  var _a = useThemeContext_1.useThemeContext(),
    themeName = _a.themeName,
    themeConfig = _a.themeConfig;

  var checked = props.checked,
    className = props.className,
    style = props.style,
    _b = props.color,
    color = _b === void 0 ? constants_1.DEFAULT_COLOR : _b,
    _c = props.defaultChecked,
    defaultChecked = _c === void 0 ? false : _c,
    _d = props.disabled,
    disabled = _d === void 0 ? false : _d,
    _e = props.name,
    name = _e === void 0 ? '' : _e,
    _f = props.shape,
    shape = _f === void 0 ? themeConfig.shape : _f,
    text = props.text,
    textClassName = props.textClassName,
    textStyle = props.textStyle,
    _g = props.textPosition,
    textPosition = _g === void 0 ? constants_1.DEFAULT_TEXT_POSITION : _g,
    _h = props.onChange,
    onChange = _h === void 0 ? function_1.noop : _h,
    restProps = __rest(props, [
      'checked',
      'className',
      'style',
      'color',
      'defaultChecked',
      'disabled',
      'name',
      'shape',
      'text',
      'textClassName',
      'textStyle',
      'textPosition',
      'onChange',
    ]);

  var baseColorFromProps = useGetBaseColorFromProps_1.useGetBaseColorFromProps(color);

  var _j = react_1.useState(defaultChecked),
    isChecked = _j[0],
    setIsChecked = _j[1];

  var _k = react_1.useState(constants_1.DEFAULT_TOUCH_POSITION),
    touchPosition = _k[0],
    setTouchPosition = _k[1];

  var handleChange = react_1.useCallback(
    function (value) {
      onChange(value);

      if (checked === undefined) {
        setIsChecked(value);
      }
    },
    [checked, onChange]
  );
  var handleInputChange = react_1.useCallback(
    function (event) {
      handleChange(event.target.checked);
    },
    [handleChange]
  );
  var handleTouchStart = react_1.useCallback(
    function (event) {
      event.stopPropagation();

      if (!disabled) {
        setTouchPosition({
          start: event.touches[0].clientX,
          end: null,
        });
      }
    },
    [disabled]
  );
  var handleTouchMove = react_1.useCallback(
    function (event) {
      if (!disabled) {
        var currentTouchPosition_1 = event.touches[0].clientX;
        setTouchPosition(function (prevState) {
          return __assign(__assign({}, prevState), {
            end: currentTouchPosition_1,
          });
        });
      }
    },
    [disabled]
  );
  var handleTouchEnd = react_1.useCallback(
    function () {
      var start = touchPosition.start,
        end = touchPosition.end;

      if (disabled || end === null) {
        return;
      }

      if (start > end && start - end > constants_1.SWITCH_DISPLACEMENT) {
        handleChange(false);
      }

      if (start < end && end - start > constants_1.SWITCH_DISPLACEMENT) {
        handleChange(true);
      }

      setTouchPosition(constants_1.DEFAULT_TOUCH_POSITION);
    },
    [touchPosition, disabled, handleChange]
  );
  var handleCheckChecked = react_1.useCallback(
    function () {
      if (checked !== undefined && checked !== isChecked) {
        setIsChecked(checked);
      } // eslint-disable-next-line react-hooks/exhaustive-deps
    },
    [checked]
  );
  react_1.useEffect(handleCheckChecked, [handleCheckChecked]);
  return react_1.default.createElement(
    styles_1.StyledLabel,
    null,
    react_1.default.createElement(
      styles_1.StyledTouchContainer,
      {
        onTouchStart: handleTouchStart,
        onTouchMove: handleTouchMove,
        onTouchEnd: handleTouchEnd,
      },
      react_1.default.createElement(
        styles_1.StyledInput,
        __assign({}, restProps, {
          name: name,
          type: 'checkbox',
          color: baseColorFromProps,
          checked: isChecked,
          disabled: disabled,
          ref: ref,
          onChange: handleInputChange,
        })
      ),
      react_1.default.createElement(
        styles_1.StyledSlider,
        {
          checked: isChecked,
          className: className,
          style: style,
          disabled: disabled,
          shape: shape,
        },
        react_1.default.createElement(styles_1.StyledSliderHoverPlace, null)
      ),
      text
        ? react_1.default.createElement(
            styles_1.StyledText,
            {
              className: textClassName,
              style: textStyle,
              textPosition: textPosition,
              disabled: disabled,
              currentTheme: themeName,
            },
            react_1.default.createElement(
              Typography_1.default,
              {
                color: disabled
                  ? components_1.TYPOGRAPHY_COLORS.disabled
                  : components_1.TYPOGRAPHY_COLORS.main,
                variant: components_1.TYPOGRAPHY_VARIANTS.bodyL,
              },
              text
            )
          )
        : null
    )
  );
});

Switch.propTypes = {
  /**
   * Задает значение для состояния компонента
   */
  checked: PropTypes.bool,
  /**
   * Устанавливает дополнительные классы для элемента
   */
  className: PropTypes.string,
  /**
   * Задает цвет подложки для переключателя
   * @default 'primary2'
   */
  color: PropTypes.oneOf(['primary1', 'primary2', 'secondary1', 'secondary2']),
  /**
   * Задает значение по умолчанию
   */
  defaultChecked: PropTypes.bool,
  /**
   * Устанавливает атрибут disabled
   */
  disabled: PropTypes.bool,
  /**
   * Устанавливает атрибут name
   */
  name: PropTypes.string,
  /**
   * Callback функция, вызываемая при изменении состояния
   * @param {boolean} value состояние компонента
   * @returns {undefined}
   */
  onChange: PropTypes.func,
  /**
   * Задает скругление, значение по умолчанию берется из темы
   */
  shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
  /**
   * Устанавливает текст возле комопонента
   */
  text: PropTypes.string,
  /**
   * Устанавливает дополнительные классы для текста
   */
  textClassName: PropTypes.string,
  /**
   * Задает расположение текста относительно компонента
   * @default 'right'
   */
  textPosition: PropTypes.oneOf(['left', 'right']),
  /**
   * Устанавливает дополнительные стили для текста
   */
  textStyle: PropTypes.object,
};

Switch.displayName = 'Switch';
exports.default = Switch;
