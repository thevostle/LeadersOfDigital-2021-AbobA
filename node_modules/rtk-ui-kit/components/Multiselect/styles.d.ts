/// <reference types="react" />
export declare const StyledIcon: import("styled-components").StyledComponent<{
    (props: import("../Icons/types").IIconProps): JSX.Element;
    displayName: string;
}, any, {
    isOpen: boolean;
}, never>;
export declare const StyledMultiselectContainer: import("styled-components").StyledComponent<"div", any, {}, never>;
export declare const StyledMultiselectInputContainer: import("styled-components").StyledComponent<"div", any, {
    disabled: boolean;
}, never>;
export declare const StyledMultiselectInput: import("styled-components").StyledComponent<import("react").ForwardRefExoticComponent<Pick<import("../Input/types").IInputPropsExtended, "label" | "style" | "type" | "name" | "className" | "color" | "onFocus" | "onBlur" | "onChange" | "onInvalid" | "error" | "value" | "defaultValue" | "isFocused" | "shape" | "disabled" | "hint" | "required" | "readOnly" | "icon" | "floatLabel" | "onClickIcon" | "titleError" | "clearable" | "validationRules" | "transformationRule" | "onInputClick" | "onInputKeyDown" | "inputControl"> & import("react").RefAttributes<HTMLInputElement>>, any, {}, never>;
export declare const MultiselectTagGroup: import("styled-components").StyledComponent<import("react").FC<import("../Tag/TagGroup/types").ITagGroup>, any, Pick<import("./types").IMultiselectProps, "error" | "shape" | "autoHeight"> & {
    theme: import("../../types/theme").ITheme;
}, never>;
export declare const StyledMultiSelectHint: import("styled-components").StyledComponent<import("react").FC<import("../Typography/types").ITypographyProps>, any, Pick<import("./types").IMultiselectProps, "error" | "shape" | "autoHeight"> & {
    theme: import("../../types/theme").ITheme;
}, never>;
