import { FocusEventHandler, CSSProperties } from 'react';
import { BaseColorsType, ShapesType } from '../../types/base';
import { ITheme } from '../../types/theme';
export interface IMultiselectOption {
    value: string;
    key: string | number;
    hint?: string;
}
export interface IMultiselectOptionExtended extends IMultiselectOption {
    isSelected: boolean;
}
export interface IMultiselectProps {
    /** Задает основной цвет
     *  @default "primary2" */
    color?: BaseColorsType;
    /** Задает скругление, значение по умолчанию берется из темы */
    shape?: ShapesType;
    /** Задает label */
    label: string;
    /** Задает значение компонента, используется для управляемых компонентов.
     * Не используется вместе с defaultValue
     * @param value - отображаемое значение
     * @param key - уникальный ключ элемента
     * @param hint - дополнительная подпись
     */
    value?: IMultiselectOption[];
    /** Задает значение по умолчанию, для неуправляемых компонентов.
     * Не используется вместе с value
     * @param value - отображаемое значение
     * @param key - уникальный ключ элемента
     * @param hint - дополнительная подпись
     */
    defaultValue?: IMultiselectOption[];
    /** Задаёт список элементов для выбора
     * @param value - отображаемое значение
     * @param key - уникальный ключ элемента
     * @param hint - дополнительная подпись
     */
    options: IMultiselectOption[];
    /** Отображает заголовок для выпадающего списка */
    title?: string;
    /** Определяет, меняется ли высота контрола в зависимости от количества элементов
     *
     *  В значении true - появляется вторая строка с выбранными options
     *  @default false */
    autoHeight?: boolean;
    /** Отображает подсказку при заполнения поля */
    hint?: string;
    /** Отображает ошибку заполнения поля */
    error?: string;
    /** Устанавливает атрибут disabled */
    disabled?: boolean;
    /** Задает первоначально открытое состояние раскрывающегося списка
     * @default false;
     */
    defaultOpen?: boolean;
    /** Задает дополнительные классы */
    className?: string;
    /** Задает дополнительные стили для компонента */
    style?: CSSProperties;
    /** Задает дополнительные классы */
    tagClassName?: string;
    /** Задает дополнительные стили для компонента */
    tagStyle?: CSSProperties;
    /** Callback функция, вызываемая при изменении значения */
    onChange?: (value: IMultiselectOption[]) => void;
    /** Callback функция, вызываемая на фокус */
    onFocus?: FocusEventHandler;
    /** Callback функция, вызываемая при потере фокуса */
    onBlur?: FocusEventHandler;
}
export declare type StyledMultiselectPropsType = Pick<IMultiselectProps, 'shape' | 'autoHeight' | 'error'> & {
    theme: ITheme;
};
