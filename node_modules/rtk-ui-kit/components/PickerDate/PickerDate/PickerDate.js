'use strict';
var PropTypes = require('prop-types');

var __assign =
  (void 0 && (void 0).__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

    return __assign.apply(this, arguments);
  };

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var dayjs_1 = __importDefault(require('dayjs'));

var components_1 = require('../../../constants/components');

var function_1 = require('../../../utils/function');

var utils_1 = require('./utils');

var utils_2 = require('../utils');

var useThemeContext_1 = require('../../../hooks/useThemeContext');

var constants_1 = require('../constants');

var constants_2 = require('../CalendarTimes/constants');

var ChevronLeft_1 = __importDefault(require('../../Icons/navigation/ChevronLeft'));

var ChevronRight_1 = __importDefault(require('../../Icons/navigation/ChevronRight'));

var CalendarDates_1 = __importDefault(require('../CalendarDates/CalendarDates'));

var CalendarMonths_1 = __importDefault(require('../CalendarMonths/CalendarMonths'));

var CalendarYears_1 = __importDefault(require('../CalendarYears/CalendarYears'));

var CalendarTimes_1 = __importDefault(require('../CalendarTimes/CalendarTimes'));

var styles_1 = require('./styles');

var PickerDate = function PickerDate(props) {
  var today = react_1.useMemo(function () {
    return new Date();
  }, []);
  var themeConfig = useThemeContext_1.useThemeContext().themeConfig;
  var _a = props.shape,
    shape = _a === void 0 ? themeConfig.shape : _a,
    _b = props.color,
    color = _b === void 0 ? constants_1.DEFAULT_COLOR : _b,
    _c = props.isRange,
    isRange = _c === void 0 ? false : _c,
    activeValue = props.activeDate,
    secondValue = props.secondDate,
    _d = props.firstDayIndex,
    firstDayIndex = _d === void 0 ? constants_1.FIRST_DAY_INDEX : _d,
    _e = props.daysOfWeek,
    daysOfWeek = _e === void 0 ? constants_1.DAYS_OF_WEEK : _e,
    _f = props.months,
    months = _f === void 0 ? constants_1.MONTHS : _f,
    minYear = props.minYear,
    maxYear = props.maxYear,
    minDate = props.minDate,
    maxDate = props.maxDate,
    disabledDates = props.disabledDates,
    _g = props.showTime,
    showTime = _g === void 0 ? false : _g,
    _h = props.timeProps,
    timeProps =
      _h === void 0
        ? {
            isRange: false,
            interval: constants_2.DEFAULT_MINUTES_INTERVAL,
            format: constants_2.DEFAULT_TIME_FORMAT,
          }
        : _h,
    _j = props.onSelect,
    onSelect = _j === void 0 ? function_1.noop : _j,
    className = props.className,
    style = props.style,
    dayClassName = props.dayClassName,
    dayStyle = props.dayStyle,
    renderDate = props.renderDate;

  var _k = react_1.useState(constants_1.CALENDAR_VIEW.day),
    view = _k[0],
    setView = _k[1];

  var _l = react_1.useState(activeValue || today),
    date = _l[0],
    setDate = _l[1];

  react_1.useEffect(
    function () {
      setDate(activeValue || today);
    },
    [activeValue, today]
  );

  var handleSelectMonth = function handleSelectMonth(month) {
    setDate(new Date(date.getFullYear(), month, 1));
    setView(constants_1.CALENDAR_VIEW.day);
  };

  var handleSelectYear = function handleSelectYear(year) {
    setDate(new Date(year, date.getMonth(), 1));
    setView(constants_1.CALENDAR_VIEW.day);
  };

  var handleSelectTime = function handleSelectTime(first, second) {
    onSelect(first, second);
    setView(constants_1.CALENDAR_VIEW.day);
  };

  var handleSelectDay = function handleSelectDay(first, second) {
    if (showTime) {
      setDate(first);
      setView(constants_1.CALENDAR_VIEW.time);
    } else {
      onSelect(first, second);
    }
  };

  var renderHeader = function renderHeader() {
    switch (view) {
      case constants_1.CALENDAR_VIEW.time:
        return react_1.default.createElement(
          styles_1.StyledPickerDateContainer,
          null,
          react_1.default.createElement(
            styles_1.StyledPickerDateNavButton,
            {
              shape: shape,
              isDayView: true,
              onClick: function onClick() {
                return setDate(utils_2.getPrevDay(date));
              },
            },
            react_1.default.createElement(ChevronLeft_1.default, null)
          ),
          react_1.default.createElement(
            styles_1.StyledPickerDateContainer,
            null,
            react_1.default.createElement(
              styles_1.StyledPickerDateContainerTime,
              {
                variant: components_1.TYPOGRAPHY_VARIANTS.accentM,
                shape: shape,
              },
              dayjs_1.default(date).format(constants_1.DEFAULT_DATE_FORMAT)
            )
          ),
          react_1.default.createElement(
            styles_1.StyledPickerDateNavButton,
            {
              shape: shape,
              isDayView: true,
              onClick: function onClick() {
                return setDate(utils_2.getNextDay(date));
              },
            },
            react_1.default.createElement(ChevronRight_1.default, null)
          )
        );

      default:
        return react_1.default.createElement(
          styles_1.StyledPickerDateContainer,
          null,
          react_1.default.createElement(
            styles_1.StyledPickerDateNavButton,
            {
              shape: shape,
              isDayView: view === constants_1.CALENDAR_VIEW.day,
              onClick: function onClick() {
                return (
                  view === constants_1.CALENDAR_VIEW.day && setDate(utils_1.getPrevMonth(date))
                );
              },
            },
            view === constants_1.CALENDAR_VIEW.day &&
              react_1.default.createElement(ChevronLeft_1.default, null)
          ),
          react_1.default.createElement(
            styles_1.StyledPickerDateContainer,
            null,
            react_1.default.createElement(
              styles_1.StyledPickerDateContainerMonth,
              {
                shape: shape,
                active: view === constants_1.CALENDAR_VIEW.month,
                onClick: function onClick() {
                  return setView(constants_1.CALENDAR_VIEW.month);
                },
              },
              months[date.getMonth()]
            ),
            react_1.default.createElement(
              styles_1.StyledPickerDateContainerYear,
              {
                shape: shape,
                active: view === constants_1.CALENDAR_VIEW.year,
                onClick: function onClick() {
                  return setView(constants_1.CALENDAR_VIEW.year);
                },
              },
              date.getFullYear()
            )
          ),
          react_1.default.createElement(
            styles_1.StyledPickerDateNavButton,
            {
              shape: shape,
              isDayView: view === constants_1.CALENDAR_VIEW.day,
              onClick: function onClick() {
                return (
                  view === constants_1.CALENDAR_VIEW.day && setDate(utils_1.getNextMonth(date))
                );
              },
            },
            view === constants_1.CALENDAR_VIEW.day &&
              react_1.default.createElement(ChevronRight_1.default, null)
          )
        );
    }
  };

  var renderContent = function renderContent() {
    switch (view) {
      case constants_1.CALENDAR_VIEW.time:
        return react_1.default.createElement(
          CalendarTimes_1.default,
          __assign(
            {
              date: date,
              shape: shape,
              color: color,
              firstTime: activeValue,
              secondTime: secondValue,
              onSelect: handleSelectTime,
            },
            timeProps
          )
        );

      case constants_1.CALENDAR_VIEW.month:
        return react_1.default.createElement(CalendarMonths_1.default, {
          shape: shape,
          date: date,
          color: color,
          months: months,
          onSelect: handleSelectMonth,
        });

      case constants_1.CALENDAR_VIEW.year:
        return react_1.default.createElement(CalendarYears_1.default, {
          shape: shape,
          date: date,
          color: color,
          minYear: minYear,
          maxYear: maxYear,
          onSelect: handleSelectYear,
        });

      case constants_1.CALENDAR_VIEW.day:
      default:
        return react_1.default.createElement(CalendarDates_1.default, {
          shape: shape,
          date: date,
          activeDate: activeValue,
          secondDate: secondValue,
          isRange: showTime ? false : isRange,
          firstDayIndex: firstDayIndex,
          daysOfWeek: daysOfWeek,
          minDate: minDate,
          maxDate: maxDate,
          disabledDates: disabledDates,
          color: color,
          onSelect: handleSelectDay,
          className: dayClassName,
          style: dayStyle,
          renderDate: renderDate,
        });
    }
  };

  return react_1.default.createElement(
    styles_1.StyledPickerDate,
    {
      shape: shape,
      className: className,
      style: style,
    },
    renderHeader(),
    renderContent()
  );
};

PickerDate.propTypes = {
  /**
   * Значение активной даты по умолчанию
   */
  activeDate: PropTypes.instanceOf(Date),
  /**
   * Задает дополнительные классы
   */
  className: PropTypes.string,
  /**
   * Задает основной цвет
   *  @default "primary2"
   */
  color: PropTypes.oneOf(['primary1', 'primary2', 'secondary1', 'secondary2']),
  /**
   * Задает дополнительные классы
   */
  dayClassName: PropTypes.string,
  /**
   * Задает названия дней недели
   *  @default ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс']
   */
  daysOfWeek: PropTypes.arrayOf(PropTypes.string),
  /**
   * Задает дополнительные стили для компонента
   */
  dayStyle: PropTypes.object,
  /**
   * Задает дизейбленые даты, которые нельзя выбрать
   */
  disabledDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)),
  /**
   * Задает индекс первого дня недели
   * @default 1
   */
  firstDayIndex: PropTypes.number,
  /**
   * Дает возможность выбрать период из двух дат
   *  @default false
   */
  isRange: PropTypes.bool,
  /**
   * Задает максимальную дату для выбора
   */
  maxDate: PropTypes.instanceOf(Date),
  /**
   * Задает максимальный отображаемый год в календаре, по умолчанию текущий + 10
   * @default 2031
   */
  maxYear: PropTypes.number,
  /**
   * Задает минимальную дату для выбора
   */
  minDate: PropTypes.instanceOf(Date),
  /**
   * Задает минимальный отображаемый год в календаре
   * @default 1980
   */
  minYear: PropTypes.number,
  /**
   * Задает названия месяцов
   *  @default [
   * 'Январь',
   * 'Февраль',
   * 'Март',
   * 'Апрель',
   * 'Май',
   * 'Июнь',
   * 'Июль',
   * 'Август',
   * 'Сентябрь',
   * 'Октябрь',
   * 'Ноябрь',
   * 'Декабрь',
   * ]
   */
  months: PropTypes.arrayOf(PropTypes.string),
  /**
   * Callback функция, вызываемая при изменении значения
   * @param activeDate - выбранная дата
   * @param secondDate - вторая выбранная дата
   */
  onSelect: PropTypes.func,
  /**
   * Функция, которая дает возможность кастомного вывода даты
   * @param date - дата
   */
  renderDate: PropTypes.func,
  /**
   * Значение второй даты по умолчанию (когда isRange = true)
   */
  secondDate: PropTypes.instanceOf(Date),
  /**
   * Задает скругление, значение по умолчанию берется из темы
   */
  shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
  /**
   * Добавляет возможност выбора времени PickerTime (не работает при isRange = true)
   * @default false
   */
  showTime: PropTypes.bool,
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
  /**
   * Задает параметры для выбора времени
   * @param isRange - Дает возможность выбрать период из двух дат
   * @param interval - Задает интвервал выбора времени в минутах
   * @param formst - Формат вывода времени
   */
  timeProps: PropTypes.shape({
    /**
     * Формат вывода времени
     * @default "HH:mm"
     */
    format: PropTypes.string,
    /**
     * Задает интвервал выбора времени в минутах
     * @default 15
     */
    interval: PropTypes.number,
    /**
     * Дает возможность выбрать период
     *  @default false
     */
    isRange: PropTypes.bool,
  }),
};

PickerDate.displayName = 'PickerDate';
exports.default = PickerDate;
