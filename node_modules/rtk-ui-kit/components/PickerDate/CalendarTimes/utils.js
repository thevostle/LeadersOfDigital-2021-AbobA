'use strict';

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

exports.getFocusedTimesArray = exports.getTimesArray = void 0;

var dayjs_1 = __importDefault(require('dayjs'));

var isSameOrBefore_1 = __importDefault(require('dayjs/plugin/isSameOrBefore'));

var constants_1 = require('./constants');

dayjs_1.default.extend(isSameOrBefore_1.default);

var getTimeStatus = function getTimeStatus(time, focusedTimes, format) {
  if (format === void 0) {
    format = constants_1.DEFAULT_TIME_FORMAT;
  }

  var timeString = time.format(format);

  if (focusedTimes.includes(timeString)) {
    if (timeString === focusedTimes[0]) {
      return constants_1.TIME_STATUS.focusedFirst;
    }

    if (timeString === focusedTimes[focusedTimes.length - 1]) {
      return constants_1.TIME_STATUS.focusedLast;
    }

    return constants_1.TIME_STATUS.focused;
  }

  return constants_1.TIME_STATUS.default;
};

var getTimesArray = function getTimesArray(date, interval, focusedTimes, format) {
  if (date === void 0) {
    date = new Date();
  }

  if (interval === void 0) {
    interval = constants_1.DEFAULT_MINUTES_INTERVAL;
  }

  if (format === void 0) {
    format = constants_1.DEFAULT_TIME_FORMAT;
  }

  var minTime = dayjs_1.default(date).hour(0).minute(0).second(0);
  var maxTime = dayjs_1.default(date).hour(23).minute(59).second(59);
  var times = [];

  for (var i = minTime; i.isSameOrBefore(maxTime); i = i.add(interval, 'minute')) {
    times.push({
      time: new Date(i.format()),
      status: getTimeStatus(i, focusedTimes, format),
    });
  }

  return times;
};

exports.getTimesArray = getTimesArray;

var getFocusedTimesArray = function getFocusedTimesArray(interval, from, to, format) {
  if (interval === void 0) {
    interval = constants_1.DEFAULT_MINUTES_INTERVAL;
  }

  if (format === void 0) {
    format = constants_1.DEFAULT_TIME_FORMAT;
  }

  var times = [];

  if (from && to) {
    for (var i = dayjs_1.default(from); i.isSameOrBefore(to); i = i.add(interval, 'minute')) {
      times.push(i.format(format));
    }
  }

  return times;
};

exports.getFocusedTimesArray = getFocusedTimesArray;
