'use strict';

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

exports.useCalendarTimes = void 0;

var react_1 = require('react');

var dayjs_1 = __importDefault(require('dayjs'));

var utils_1 = require('./utils');

var function_1 = require('../../../utils/function');

var constants_1 = require('./constants');

var useCalendarTimes = function useCalendarTimes(_a, ref) {
  var _b = _a.date,
    date = _b === void 0 ? new Date() : _b,
    firstTime = _a.firstTime,
    secondTime = _a.secondTime,
    isRange = _a.isRange,
    _c = _a.onSelect,
    onSelect = _c === void 0 ? function_1.noop : _c,
    _d = _a.interval,
    interval = _d === void 0 ? constants_1.DEFAULT_MINUTES_INTERVAL : _d,
    _e = _a.format,
    format = _e === void 0 ? constants_1.DEFAULT_TIME_FORMAT : _e;

  var _f = react_1.useState(firstTime),
    activeValue = _f[0],
    setActiveValue = _f[1];

  var _g = react_1.useState(secondTime),
    secondValue = _g[0],
    setSecondValue = _g[1];

  var _h = react_1.useState(
      utils_1.getFocusedTimesArray(interval, activeValue, secondValue, format)
    ),
    focusedTimes = _h[0],
    setFocusedTimes = _h[1];

  react_1.useEffect(
    function () {
      if (!ref.current) {
        return;
      }

      ref.current.scrollIntoView({
        block: 'center',
      });
    },
    [ref]
  );
  react_1.useEffect(
    function () {
      setActiveValue(firstTime);
    },
    [firstTime]
  );
  react_1.useEffect(
    function () {
      setSecondValue(secondTime);
    },
    [secondTime]
  );
  react_1.useEffect(
    function () {
      setFocusedTimes(utils_1.getFocusedTimesArray(interval, firstTime, secondTime, format));
    },
    [firstTime, secondTime, interval, format]
  );

  var handleClick = function handleClick(time) {
    return function (e) {
      e.nativeEvent.stopImmediatePropagation();

      if (isRange) {
        if (activeValue && secondValue) {
          setActiveValue(time);
          setSecondValue(undefined);
          setFocusedTimes([]);
          return;
        }

        if (activeValue && dayjs_1.default(time).isAfter(activeValue)) {
          setSecondValue(time);
          onSelect(activeValue, time);
          return;
        }

        setActiveValue(time);
      } else {
        setActiveValue(time);
        onSelect(time);
      }
    };
  };

  var handleMouseEnter = function handleMouseEnter(value) {
    return function () {
      if (isRange && activeValue && !secondValue) {
        setFocusedTimes(utils_1.getFocusedTimesArray(interval, activeValue, value, format));
      }
    };
  };

  var handeMouseLeave = function handeMouseLeave() {
    if (isRange && activeValue && !secondValue) {
      setFocusedTimes([]);
    }
  };

  return {
    activeValue: activeValue,
    secondValue: secondValue,
    times: utils_1.getTimesArray(date, interval, focusedTimes, format),
    handleClick: handleClick,
    handleMouseEnter: handleMouseEnter,
    handeMouseLeave: handeMouseLeave,
  };
};

exports.useCalendarTimes = useCalendarTimes;
