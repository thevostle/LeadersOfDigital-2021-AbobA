'use strict';

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

exports.useCalendarDates = void 0;

var react_1 = require('react');

var dayjs_1 = __importDefault(require('dayjs'));

var utils_1 = require('./utils');

var function_1 = require('../../../utils/function');

var constants_1 = require('../constants');

var constants_2 = require('./constants');

var useCalendarDates = function useCalendarDates(_a) {
  var date = _a.date,
    activeDate = _a.activeDate,
    secondDate = _a.secondDate,
    isRange = _a.isRange,
    _b = _a.onSelect,
    onSelect = _b === void 0 ? function_1.noop : _b,
    _c = _a.firstDayIndex,
    firstDayIndex = _c === void 0 ? constants_1.FIRST_DAY_INDEX : _c,
    minDate = _a.minDate,
    maxDate = _a.maxDate,
    _d = _a.disabledDates,
    disabledDates = _d === void 0 ? [] : _d;

  var _e = react_1.useState(activeDate),
    activeValue = _e[0],
    setActiveValue = _e[1];

  var _f = react_1.useState(secondDate),
    secondValue = _f[0],
    setSecondValue = _f[1];

  var _g = react_1.useState(utils_1.getFocusedDatesArray(activeValue, secondValue)),
    focusedDates = _g[0],
    setFocusedDates = _g[1];

  react_1.useEffect(
    function () {
      setActiveValue(activeDate);
    },
    [activeDate]
  );
  react_1.useEffect(
    function () {
      setSecondValue(secondDate);
    },
    [secondDate]
  );
  react_1.useEffect(
    function () {
      setFocusedDates(utils_1.getFocusedDatesArray(activeDate, secondDate));
    },
    [activeDate, secondDate]
  );

  var handleClick = function handleClick(day) {
    return function (e) {
      e.nativeEvent.stopImmediatePropagation();

      if (day.status === constants_2.DATE_STATUS.disabled) {
        return;
      }

      if (isRange) {
        if (activeValue && secondValue) {
          setActiveValue(day.date);
          setSecondValue(undefined);
          setFocusedDates([]);
          return;
        }

        if (activeValue && dayjs_1.default(day.date).isAfter(activeValue)) {
          setSecondValue(day.date);
          onSelect(activeValue, day.date);
          return;
        }

        setActiveValue(day.date);
      } else {
        setActiveValue(day.date);
        onSelect(day.date);
      }
    };
  };

  var handleMouseEnter = function handleMouseEnter(value) {
    return function () {
      if (isRange && activeValue && !secondValue) {
        setFocusedDates(utils_1.getFocusedDatesArray(activeValue, value));
      }
    };
  };

  var handeMouseLeave = function handeMouseLeave() {
    if (isRange && activeValue && !secondValue) {
      setFocusedDates([]);
    }
  };

  return {
    activeValue: activeValue,
    secondValue: secondValue,
    dates: utils_1.getDates(date, {
      firstDayIndex: firstDayIndex,
      minDate: minDate,
      maxDate: maxDate,
      focusedDates: focusedDates,
      disabledDates: disabledDates,
    }),

    handleClick: handleClick,
    handleMouseEnter: handleMouseEnter,
    handeMouseLeave: handeMouseLeave,
  };
};

exports.useCalendarDates = useCalendarDates;
