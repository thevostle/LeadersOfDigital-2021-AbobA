'use strict';

var __assign =
  (void 0 && (void 0).__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

    return __assign.apply(this, arguments);
  };

var __spreadArray =
  (void 0 && (void 0).__spreadArray) ||
  function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
      to[j] = from[i];
    }

    return to;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

exports.getDates = exports.getDatesArray = exports.getFocusedDatesArray = void 0;

var dayjs_1 = __importDefault(require('dayjs'));

var isBetween_1 = __importDefault(require('dayjs/plugin/isBetween'));

var constants_1 = require('./constants');

var utils_1 = require('../utils');

dayjs_1.default.extend(isBetween_1.default);

var getDaysInMonth = function getDaysInMonth(year, month) {
  return new Date(year, month + 1, 0).getDate();
};

var getFocusedDatesArray = function getFocusedDatesArray(from, to) {
  var dates = [];

  if (from && to) {
    for (var d = from; d <= to; d = utils_1.getNextDay(d)) {
      dates.push(new Date(d).toDateString());
    }
  }

  return dates;
};

exports.getFocusedDatesArray = getFocusedDatesArray;

var checkDisabledDate = function checkDisabledDate(date, params) {
  var disabledDates = params.disabledDates,
    minDate = params.minDate,
    maxDate = params.maxDate;
  var disabledDatesToSting = disabledDates.map(function (i) {
    return i.toDateString();
  });

  if (disabledDatesToSting.includes(date.toDateString())) {
    return true;
  }

  if (minDate && maxDate) {
    if (
      date.toDateString() === minDate.toDateString() ||
      date.toDateString() === maxDate.toDateString()
    ) {
      return false;
    }

    return !dayjs_1.default(date).isBetween(minDate, maxDate);
  }

  if (minDate) {
    return dayjs_1.default(date).isBefore(minDate);
  }

  if (maxDate) {
    return dayjs_1.default(date).isAfter(maxDate);
  }

  return false;
};

var getDateStatus = function getDateStatus(date, params) {
  var focusedDates = params.focusedDates;
  var dateString = date.toDateString();

  if (checkDisabledDate(date, params)) {
    return constants_1.DATE_STATUS.disabled;
  }

  if (focusedDates.includes(dateString)) {
    if (dateString === focusedDates[0]) {
      return constants_1.DATE_STATUS.focusedFirst;
    }

    if (dateString === focusedDates[focusedDates.length - 1]) {
      return constants_1.DATE_STATUS.focusedLast;
    }

    return constants_1.DATE_STATUS.focused;
  }

  return constants_1.DATE_STATUS.default;
};

var getDatesArray = function getDatesArray(from, to, params) {
  var dates = [];

  for (var d = from; d <= to; d = utils_1.getNextDay(d)) {
    var date = new Date(d);
    dates.push({
      date: date,
      empty: params.empty,
      status: getDateStatus(date, params),
    });
  }

  return dates;
};

exports.getDatesArray = getDatesArray;

var getDates = function getDates(date, params) {
  var month = date.getMonth();
  var year = date.getFullYear();
  var dates = exports.getDatesArray(
    new Date(year, month, 1),
    new Date(year, month, getDaysInMonth(year, month)),
    params
  );
  var prevMonthDates = [];
  var firstDayInMonth = new Date(year, month, 1).getDay();
  var prevMonthDateTo = getDaysInMonth(year, month - 1);

  if (firstDayInMonth !== params.firstDayIndex) {
    var prevDatesLength = (firstDayInMonth === 0 ? 7 : firstDayInMonth) - params.firstDayIndex - 1;
    prevMonthDates = exports.getDatesArray(
      new Date(year, month - 1, prevMonthDateTo - prevDatesLength),
      new Date(year, month - 1, prevMonthDateTo),
      __assign(__assign({}, params), {
        empty: true,
      })
    );
  } // если посл день предыдущего мсесяца в фокусе

  if (
    params.focusedDates.includes(new Date(year, month - 1, prevMonthDateTo).toDateString()) &&
    prevMonthDates.length
  ) {
    prevMonthDates[prevMonthDates.length - 1] = __assign(
      __assign({}, prevMonthDates[prevMonthDates.length - 1]),
      {
        gradient: constants_1.RANGE_GRADIENT.before,
      }
    );
  } // если первый день следующего месяца в фокусе

  var isNotEndOfWeek = dates[dates.length - 1].date.getDay() !== params.firstDayIndex - 1;

  if (params.focusedDates.includes(new Date(year, month + 1, 1).toDateString()) && isNotEndOfWeek) {
    dates.push({
      date: utils_1.getNextDay(dates[dates.length - 1].date),
      empty: true,
      gradient: constants_1.RANGE_GRADIENT.after,
      status: constants_1.DATE_STATUS.default,
    });
  }

  return __spreadArray(__spreadArray([], prevMonthDates), dates);
};

exports.getDates = getDates;
