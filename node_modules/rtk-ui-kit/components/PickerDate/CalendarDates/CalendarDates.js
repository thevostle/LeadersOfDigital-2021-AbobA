'use strict';
var PropTypes = require('prop-types');

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importDefault(require('react'));

var constants_1 = require('../constants');

var hooks_1 = require('./hooks');

var useGetBaseColorFromProps_1 = require('../../../hooks/useGetBaseColorFromProps');

var useThemeContext_1 = require('../../../hooks/useThemeContext');

var styles_1 = require('./styles');

var CalendarDates = function CalendarDates(props) {
  var themeConfig = useThemeContext_1.useThemeContext().themeConfig;
  var _a = props.shape,
    shape = _a === void 0 ? themeConfig.shape : _a,
    _b = props.color,
    color = _b === void 0 ? constants_1.DEFAULT_COLOR : _b,
    _c = props.daysOfWeek,
    daysOfWeek = _c === void 0 ? constants_1.DAYS_OF_WEEK : _c,
    className = props.className,
    style = props.style,
    renderDate = props.renderDate;
  var baseColorFromProps = useGetBaseColorFromProps_1.useGetBaseColorFromProps(color);

  var _d = hooks_1.useCalendarDates(props),
    activeValue = _d.activeValue,
    secondValue = _d.secondValue,
    dates = _d.dates,
    handleClick = _d.handleClick,
    handleMouseEnter = _d.handleMouseEnter,
    handeMouseLeave = _d.handeMouseLeave;

  var renderDateContent = function renderDateContent(date) {
    return renderDate ? renderDate(date) : date.getDate();
  };

  return react_1.default.createElement(
    styles_1.StyledCalendarDates,
    null,
    daysOfWeek.map(function (day) {
      return react_1.default.createElement(
        styles_1.StyledCalendarDatesDayWeek,
        {
          key: day,
        },
        day
      );
    }),
    dates.map(function (day, key) {
      if (day.empty) {
        // eslint-disable-next-line react/no-array-index-key
        return react_1.default.createElement(styles_1.StyledCalendarDateEmpty, {
          key: key,
          gradient: day.gradient,
        });
      }

      var isActiveDate =
        day.date.toDateString() ===
          (activeValue === null || activeValue === void 0 ? void 0 : activeValue.toDateString()) ||
        day.date.toDateString() ===
          (secondValue === null || secondValue === void 0 ? void 0 : secondValue.toDateString());
      return react_1.default.createElement(
        styles_1.StyledCalendarDatesItem, // eslint-disable-next-line react/no-array-index-key
        {
          // eslint-disable-next-line react/no-array-index-key
          key: key,
          className: className,
          style: style,
          shape: shape,
          status: day.status,
          color: baseColorFromProps,
          isCurrent: day.date.toDateString() === new Date().toDateString(),
          onClick: handleClick(day),
          onMouseEnter: handleMouseEnter(day.date),
          onMouseLeave: handeMouseLeave,
        },
        isActiveDate
          ? react_1.default.createElement(
              styles_1.StyledCalendarDateActive,
              {
                shape: shape,
                status: day.status,
                color: baseColorFromProps,
              },
              renderDateContent(day.date)
            )
          : react_1.default.createElement(
              styles_1.StyledCalendarDateInner,
              null,
              renderDateContent(day.date)
            )
      );
    })
  );
};

CalendarDates.propTypes = {
  className: PropTypes.string,
  color: PropTypes.oneOf(['primary1', 'primary2', 'secondary1', 'secondary2']),
  daysOfWeek: PropTypes.arrayOf(PropTypes.string),
  renderDate: PropTypes.func,
  shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
  style: PropTypes.object,
};

CalendarDates.displayName = 'CalendarDates';
exports.default = CalendarDates;
