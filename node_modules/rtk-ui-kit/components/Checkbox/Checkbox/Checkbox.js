'use strict';
var PropTypes = require('prop-types');

var __assign =
  (void 0 && (void 0).__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

    return __assign.apply(this, arguments);
  };

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

var __rest =
  (void 0 && (void 0).__rest) ||
  function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === 'function')
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var context_1 = require('../context');

var useGetBaseColorFromProps_1 = require('../../../hooks/useGetBaseColorFromProps');

var useThemeContext_1 = require('../../../hooks/useThemeContext');

var BaseInput_1 = __importDefault(require('../../Base/BaseInput/BaseInput'));

var Typography_1 = __importDefault(require('../../Typography/Typography'));

var CheckSmall_1 = __importDefault(require('../../Icons/navigation/CheckSmall'));

var RemoveSmall_1 = __importDefault(require('../../Icons/actions/RemoveSmall'));

var components_1 = require('../../../constants/components');

var styles_1 = require('./styles');

var Checkbox = react_1.forwardRef(function Checkbox(props, ref) {
  var themeConfig = useThemeContext_1.useThemeContext().themeConfig;

  var _a = props.color,
    color = _a === void 0 ? components_1.BASE_COLORS.primary2 : _a,
    _b = props.shape,
    shape = _b === void 0 ? themeConfig.shape : _b,
    id = props.id,
    name = props.name,
    _c = props.disabled,
    disabled = _c === void 0 ? false : _c,
    _d = props.indeterminate,
    indeterminate = _d === void 0 ? false : _d,
    checked = props.checked,
    _e = props.defaultChecked,
    defaultChecked = _e === void 0 ? false : _e,
    className = props.className,
    style = props.style,
    children = props.children,
    onChange = props.onChange,
    restProps = __rest(props, [
      'color',
      'shape',
      'id',
      'name',
      'disabled',
      'indeterminate',
      'checked',
      'defaultChecked',
      'className',
      'style',
      'children',
      'onChange',
    ]);

  var baseColorFromProps = useGetBaseColorFromProps_1.useGetBaseColorFromProps(color);

  var _f = react_1.useContext(context_1.CheckboxGroupContext),
    onGroupChange = _f.onGroupChange,
    groupValue = _f.groupValue,
    groupDisabled = _f.groupDisabled,
    disabledAll = _f.disabledAll;

  var _g = react_1.useState(defaultChecked),
    isChecked = _g[0],
    setIsChecked = _g[1];

  var _h = react_1.useState(indeterminate),
    isIndeterminate = _h[0],
    setIsIndeterminate = _h[1];

  var _j = react_1.useState(disabled),
    isDisabled = _j[0],
    setIsDisabled = _j[1];

  var handleInputChange = react_1.useCallback(
    function (event) {
      var checkboxChecked = event.target.checked;

      if (onChange) {
        onChange(checkboxChecked, isIndeterminate);
      }

      if (onGroupChange) {
        onGroupChange(event.target.id);
      }

      if (checked === undefined) {
        setIsChecked(checkboxChecked);
      }
    },
    [onGroupChange, onChange, setIsChecked, checked, isIndeterminate]
  );

  var renderIcon = function renderIcon() {
    if (isIndeterminate) {
      return react_1.default.createElement(RemoveSmall_1.default, null);
    }

    if (isChecked) {
      return react_1.default.createElement(CheckSmall_1.default, null);
    }

    return null;
  };

  react_1.useEffect(
    function () {
      if (indeterminate !== isIndeterminate) {
        setIsIndeterminate(indeterminate);
      }

      if (groupValue && id) {
        var newValue = groupValue.includes(id);
        setIsChecked(newValue);
      } else if (checked !== undefined && checked !== isChecked) {
        setIsChecked(checked);
      } // eslint-disable-next-line react-hooks/exhaustive-deps
    },
    [indeterminate, groupValue, groupDisabled, checked]
  );
  react_1.useEffect(
    function () {
      if (groupDisabled && id) {
        var newDisabled = disabledAll || groupDisabled.includes(id);
        setIsDisabled(newDisabled);
      } else if (disabled !== isDisabled) {
        setIsDisabled(disabled);
      } // eslint-disable-next-line react-hooks/exhaustive-deps
    },
    [groupDisabled, disabled]
  );
  var checkboxIcon = renderIcon();
  return react_1.default.createElement(
    styles_1.StyledCheckbox,
    {
      className: className,
      style: style,
      color: baseColorFromProps,
      disabled: isDisabled,
      checked: isChecked,
      indeterminate: isIndeterminate,
    },
    react_1.default.createElement(
      BaseInput_1.default,
      __assign(
        {
          id: id,
          name: name,
          type: 'checkbox',
          disabled: isDisabled,
          checked: isChecked,
          onChange: handleInputChange,
          ref: ref,
        },
        restProps
      )
    ),
    react_1.default.createElement(
      styles_1.StyledCheckmark,
      {
        color: baseColorFromProps,
        shape: shape,
        disabled: isDisabled,
      },
      checkboxIcon
    ),
    react_1.default.createElement(
      Typography_1.default,
      {
        variant: components_1.TYPOGRAPHY_VARIANTS.bodyL,
        tag: 'span',
        color: isDisabled
          ? components_1.TYPOGRAPHY_COLORS.disabled
          : components_1.TYPOGRAPHY_COLORS.main,
      },
      children
    )
  );
});

Checkbox.propTypes = {
  /**
   * Устанавливает атрибут checked
   */
  checked: PropTypes.bool,
  children: PropTypes.node,
  /**
   * Задает дополнительные классы для компонента
   */
  className: PropTypes.string,
  /**
   * Задает основной цвет для чекбокса
   *  @default "primary2"
   */
  color: PropTypes.oneOf(['primary1', 'primary2', 'secondary1', 'secondary2']),
  /**
   * Задает значение по умолчанию
   */
  defaultChecked: PropTypes.bool,
  /**
   * Устанавливает атрибут disabled
   */
  disabled: PropTypes.bool,
  /**
   * Задает id для компонента
   */
  id: PropTypes.string,
  /**
   * Задает неопределенное значение чекбокса
   *  @default false
   */
  indeterminate: PropTypes.bool,
  /**
   * Задает атрибут name для компонента
   */
  name: PropTypes.string.isRequired,
  /**
   * Callback функция, вызываемая при изменении значения
   */
  onChange: PropTypes.func,
  /**
   * Задает скругление, значение по умолчанию берется из темы
   */
  shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
};

Checkbox.displayName = 'Checkbox';
exports.default = Checkbox;
