'use strict';
var PropTypes = require('prop-types');

var __assign =
  (void 0 && (void 0).__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

    return __assign.apply(this, arguments);
  };

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

var __spreadArray =
  (void 0 && (void 0).__spreadArray) ||
  function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
      to[j] = from[i];
    }

    return to;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var context_1 = __importDefault(require('../context'));

var function_1 = require('../../../utils/function');

var Typography_1 = __importDefault(require('../../Typography/Typography'));

var Checkbox_1 = __importDefault(require('../Checkbox/Checkbox'));

var components_1 = require('../../../constants/components');

var styles_1 = require('./styles');

var CheckboxGroup = function CheckboxGroup(props) {
  var title = props.title,
    _a = props.showParentBox,
    showParentBox = _a === void 0 ? true : _a,
    options = props.options,
    _b = props.defaultChecked,
    defaultChecked = _b === void 0 ? [] : _b,
    _c = props.disabledAll,
    disabledAll = _c === void 0 ? false : _c,
    _d = props.disabledCheckboxes,
    disabledCheckboxes = _d === void 0 ? [] : _d,
    name = props.name,
    className = props.className,
    style = props.style,
    checkboxProps = props.checkboxProps,
    _e = props.onChange,
    onChange = _e === void 0 ? function_1.noop : _e;

  var _f = react_1.useState(defaultChecked),
    groupValue = _f[0],
    setGroupValue = _f[1];

  var showLegend = react_1.useMemo(
    function () {
      return Boolean(!showParentBox && title);
    },
    [showParentBox, title]
  );
  var showLegendWithCheckbox = react_1.useMemo(
    function () {
      return Boolean(showParentBox && title);
    },
    [showParentBox, title]
  );

  var _g = react_1.useMemo(
      function () {
        return {
          checked: groupValue.length === options.length,
          indeterminate: groupValue.length > 0 && groupValue.length < options.length,
        };
      },
      [groupValue, options]
    ),
    checked = _g.checked,
    indeterminate = _g.indeterminate;

  var isEmptyEnabledBoxes = react_1.useMemo(
    function () {
      return options.some(function (opt) {
        return !disabledCheckboxes.includes(opt.key) && !groupValue.includes(opt.key);
      });
    },
    [options, groupValue, disabledCheckboxes]
  );
  var noChecked = groupValue.length === 0;
  var handleChange = react_1.useCallback(
    function (id) {
      if (!id) {
        return;
      }

      var newValue = __spreadArray([], groupValue);

      var indexValue = groupValue.findIndex(function (value) {
        return id === value;
      });

      if (indexValue === -1) {
        newValue.push(id);
      } else {
        newValue.splice(indexValue, 1);
      }

      setGroupValue(newValue);
      onChange(newValue);
    },
    [groupValue, onChange]
  );

  var setAllChecked = function setAllChecked() {
    var newValue = options.reduce(function (newArray, opt) {
      var isOptionDisabled = disabledCheckboxes.includes(opt.key);
      var isOptionChecked = groupValue.includes(opt.key);

      if (!(isOptionDisabled && !isOptionChecked)) {
        newArray.push(opt.key);
      }

      return newArray;
    }, []);
    setGroupValue(newValue);
    onChange(newValue);
  };

  var setAllUnchecked = function setAllUnchecked() {
    var newValue = options.reduce(function (newArray, opt) {
      if (disabledCheckboxes.includes(opt.key) && groupValue.includes(opt.key)) {
        newArray.push(opt.key);
      }

      return newArray;
    }, []);
    setGroupValue(newValue);
    onChange(newValue);
  };

  var parentBoxHandler = function parentBoxHandler() {
    // если нет выбранных или выбраны частично (есть пустые enabled)
    if (noChecked || (indeterminate && isEmptyEnabledBoxes)) {
      setAllChecked();
    } else {
      setAllUnchecked();
    }
  };

  var groupOptions = react_1.useMemo(
    function () {
      return options.map(function (option) {
        return react_1.default.createElement(
          Checkbox_1.default,
          __assign(
            {
              id: option.key,
              key: option.key,
              name: name,
            },
            checkboxProps
          ),
          option.value
        );
      }); // eslint-disable-next-line react-hooks/exhaustive-deps
    },
    [options]
  );
  return react_1.default.createElement(
    context_1.default,
    {
      value: {
        onGroupChange: handleChange,
        groupValue: groupValue,
        groupDisabled: disabledCheckboxes,
        disabledAll: disabledAll,
      },
    },

    react_1.default.createElement(
      styles_1.StyledCheckboxGroup,
      {
        className: className,
        style: style,
      },
      showLegendWithCheckbox &&
        react_1.default.createElement(
          styles_1.StyledTitle,
          null,
          react_1.default.createElement(
            Checkbox_1.default,
            __assign(
              {
                name: 'parentBox',
                onChange: parentBoxHandler,
                checked: checked,
                indeterminate: indeterminate,
                disabled: disabledAll,
              },
              checkboxProps
            ),
            title
          )
        ),
      showLegend &&
        react_1.default.createElement(
          styles_1.StyledTitle,
          null,
          react_1.default.createElement(
            Typography_1.default,
            {
              variant: components_1.TYPOGRAPHY_VARIANTS.bodyL,
              tag: 'legend',
              color: disabledAll
                ? components_1.TYPOGRAPHY_COLORS.disabled
                : components_1.TYPOGRAPHY_COLORS.main,
              isStatic: true,
            },
            title
          )
        ),
      react_1.default.createElement(
        styles_1.StyledOptions,
        {
          setIndent: showLegendWithCheckbox,
        },
        groupOptions
      )
    )
  );
};

CheckboxGroup.propTypes = {
  /**
   * Параметры чекбоксов
   * @param color - основной цвет чекбокса
   * @param shape - форма чекбокса
   * @param className - дополнительные классы для чекбоксов
   * @param style - дополнительные стили для чекбоксов
   */
  checkboxProps: PropTypes.shape({
    /**
     * Задает дополнительные классы для компонента
     */
    className: PropTypes.string,
    /**
     * Задает основной цвет для чекбокса
     *  @default "primary2"
     */
    color: PropTypes.oneOf(['primary1', 'primary2', 'secondary1', 'secondary2']),
    /**
     * Задает скругление, значение по умолчанию берется из темы
     */
    shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
    /**
     * Задает дополнительные стили для компонента
     */
    style: PropTypes.object,
  }),
  /**
   * Дополнительные классы для группы
   */
  className: PropTypes.string,
  /**
   * Список выбранных чекбоксов. Массив с ключами
   * @param key - ключ checked чекбокса
   */
  defaultChecked: PropTypes.arrayOf(PropTypes.string),
  /**
   * Disable для всей группы
   */
  disabledAll: PropTypes.bool,
  /**
   * Список disabled чекбоксов
   * @param key - ключ disabled чекбокса
   */
  disabledCheckboxes: PropTypes.arrayOf(PropTypes.string),
  /**
   * Задает атрибут name для чекбоксов группы
   */
  name: PropTypes.string.isRequired,
  /**
   * Callback функция, вызываемая при изменении значения
   */
  onChange: PropTypes.func,
  /**
   * Список чекбоксов. Массив объектов
   * @param key - ключ чекбокса
   * @param value - текст для чекбокса
   */
  options: PropTypes.arrayOf(
    PropTypes.shape({
      key: PropTypes.string.isRequired,
      value: PropTypes.string.isRequired,
    })
  ).isRequired,
  /**
   * Включает родительский чекбокс для группы
   * @default true
   */
  showParentBox: PropTypes.bool,
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
  /**
   * Задает заголовок для группы
   */
  title: PropTypes.string,
};

CheckboxGroup.displayName = 'CheckboxGroup';
exports.default = CheckboxGroup;
