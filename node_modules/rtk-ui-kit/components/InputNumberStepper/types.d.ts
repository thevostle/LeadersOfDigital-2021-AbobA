import { ReactNode, CSSProperties } from 'react';
import { ITheme } from '../../types/theme';
import { BaseColorsType, ShapesType } from '../../types/base';
import { STEPPER_SIZES, STEPPER_DISABLED } from '../../constants/stepper';
export declare type NumberStepperDisabledType = keyof typeof STEPPER_DISABLED;
export declare type NumberStepperSizesType = keyof typeof STEPPER_SIZES;
export interface IInputNumberStepperProps {
    /** Задает цвет компонента */
    color?: BaseColorsType;
    /** Задает скругление, значение по умолчанию берется из темы */
    shape?: ShapesType;
    /** Задает значение по умолчанию
     * @default 0
     */
    defaultValue?: number;
    /** Устанавливает атрибут disabled */
    disabled?: NumberStepperDisabledType;
    /** Устанавливает текст ошибки */
    error?: string;
    /** Устанавливает пояснительный текст */
    hint?: string;
    /** Устанавливает кастомную иконку для левой кнопки */
    leftIcon?: ReactNode;
    /** Устанавливает минимальное допустимое значение */
    min?: number;
    /** Устанавливает максимальное допустимое значение */
    max?: number;
    /** Устанавливает name */
    name?: string;
    /** Устанавливает кастомную иконку для правой кнопки */
    rightIcon?: ReactNode;
    /** Задает размер компонента
     * @default 'medium'
     */
    size?: NumberStepperSizesType;
    /** Задает шаг увеличения/уменьшения значения
     * @default 1
     */
    step?: number;
    /** Устанавливает значение для компонента */
    value?: number;
    /** Устанавливает дополнительные классы для элемента */
    className?: string;
    /** Задает дополнительные стили для компонента */
    style?: CSSProperties;
    /** Callback функция, вызываемая при нажатии на левую кнопку
     * @returns {undefined}
     */
    onLeftClick?: () => void;
    /** Callback функция, вызываемая при нажатии на правую кнопку
     * @returns {undefined}
     */
    onRightClick?: () => void;
    /** Callback функция, вызываемая при изменении значения
     * @returns {undefined}
     */
    onChange?: (value: number) => void;
}
export declare type DisabledType = {
    isAllDisabled: boolean;
    isLeftDisabled: boolean;
    isRightDisabled: boolean;
};
export declare type NumberStepperContainerPropsType = {
    disabled: boolean;
    shape: ShapesType;
    theme: ITheme;
    size: NumberStepperSizesType;
    isFocused: boolean;
    color?: string;
    error?: string;
};
export declare type NumberStepperBtnPropsType = Pick<NumberStepperContainerPropsType, 'theme' | 'color' | 'disabled' | 'shape' | 'size'> & {
    order: number;
    type: 'left' | 'right';
};
export declare type NumberStepperInputPropsType = Pick<NumberStepperContainerPropsType, 'theme' | 'color' | 'shape'> & {
    $stepperSize: NumberStepperSizesType;
    size: number;
    disabled?: boolean;
};
export declare type NumberStepperHintPropsType = Pick<NumberStepperContainerPropsType, 'theme' | 'error' | 'disabled' | 'shape'> & {
    width: number;
};
