'use strict';
var PropTypes = require('prop-types');

var __createBinding =
  (void 0 && (void 0).__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function get() {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });

var __setModuleDefault =
  (void 0 && (void 0).__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', {
          enumerable: true,
          value: v,
        });
      }
    : function (o, v) {
        o['default'] = v;
      });

var __importStar =
  (void 0 && (void 0).__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod) {
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
      }

    __setModuleDefault(result, mod);

    return result;
  };

var __importDefault =
  (void 0 && (void 0).__importDefault) ||
  function (mod) {
    return mod && mod.__esModule
      ? mod
      : {
          default: mod,
        };
  };

Object.defineProperty(exports, '__esModule', {
  value: true,
});

var react_1 = __importStar(require('react'));

var input_1 = require('../../utils/input');

var useGetBaseColorFromProps_1 = require('../../hooks/useGetBaseColorFromProps');

var AddSmall_1 = __importDefault(require('../Icons/actions/AddSmall'));

var RemoveSmall_1 = __importDefault(require('../Icons/actions/RemoveSmall'));

var useFocus_1 = require('../../hooks/useFocus');

var useThemeContext_1 = require('../../hooks/useThemeContext');

var inputNumberStepper_1 = require('../../utils/inputNumberStepper/inputNumberStepper');

var number_1 = require('../../utils/number');

var function_1 = require('../../utils/function');

var stepper_1 = require('../../constants/stepper');

var constants_1 = require('./constants');

var styles_1 = require('./styles');

var InputNumberStepper = react_1.forwardRef(function InputNumberStepper(props, ref) {
  var themeConfig = useThemeContext_1.useThemeContext().themeConfig;
  var className = props.className,
    style = props.style,
    _a = props.color,
    color = _a === void 0 ? constants_1.DEFAULT_COLOR : _a,
    _b = props.defaultValue,
    defaultValue = _b === void 0 ? constants_1.DEFAULT_VALUE : _b,
    disabled = props.disabled,
    error = props.error,
    hint = props.hint,
    leftIcon = props.leftIcon,
    min = props.min,
    max = props.max,
    _c = props.name,
    name = _c === void 0 ? '' : _c,
    rightIcon = props.rightIcon,
    _d = props.size,
    size = _d === void 0 ? constants_1.DEFAULT_SIZE : _d,
    _e = props.shape,
    shape = _e === void 0 ? themeConfig.shape : _e,
    _f = props.step,
    step = _f === void 0 ? constants_1.DEFAULT_STEP : _f,
    value = props.value,
    _g = props.onLeftClick,
    onLeftClick = _g === void 0 ? function_1.noop : _g,
    _h = props.onRightClick,
    onRightClick = _h === void 0 ? function_1.noop : _h,
    _j = props.onChange,
    onChange = _j === void 0 ? function_1.noop : _j;
  var containerRef = react_1.useRef(null);
  var baseColorFromProps = useGetBaseColorFromProps_1.useGetBaseColorFromProps(color);
  var checkedDefaultValue = react_1.useMemo(
    function () {
      return inputNumberStepper_1.getDisplayValue(number_1.clamp(defaultValue, min, max));
    }, // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  );
  var displayLeftIcon = leftIcon || react_1.default.createElement(RemoveSmall_1.default, null);
  var displayRightIcon = rightIcon || react_1.default.createElement(AddSmall_1.default, null);
  var additionalText = error || hint;

  var _k = useFocus_1.useFocus(),
    isFocused = _k.isFocused,
    onBlur = _k.onBlur,
    onFocus = _k.onFocus;

  var _l = react_1.useState(constants_1.DEFAULT_DISABLED_STATE),
    _m = _l[0],
    isAllDisabled = _m.isAllDisabled,
    isLeftDisabled = _m.isLeftDisabled,
    isRightDisabled = _m.isRightDisabled,
    setDisabled = _l[1];

  var _o = react_1.useState(0),
    hintWidth = _o[0],
    setHintWidth = _o[1];

  var _p = react_1.useState(checkedDefaultValue),
    inputValue = _p[0],
    setInputValue = _p[1];

  var inputSize =
    inputValue.length > constants_1.MAX_LENGTH_FOR_CORRECT_DISPLAY_VAL
      ? inputValue.length + 1
      : inputValue.length; // TODO: Сделать обработку ввода минуса

  var handleChange = react_1.useCallback(
    function (event) {
      var input = event.target;
      var currentValue = Number(input.value.replace(/[^\d]/g, ''));
      var displayValue = inputNumberStepper_1.getDisplayValue(currentValue);

      if (
        !number_1.withinTheInterval(currentValue, min, max) ||
        !inputNumberStepper_1.checkNumStepperValLength(displayValue)
      ) {
        return;
      }

      setInputValue(displayValue);
      input_1.correctCaretPosition(input);
      onChange(currentValue);
    },
    [max, min, onChange]
  );
  var handleLeftClick = react_1.useCallback(
    function () {
      onLeftClick();
      var prevNumVal = inputNumberStepper_1.displayValToNumberVal(inputValue);
      var newNumValue = prevNumVal - step;

      if (min) {
        newNumValue = number_1.clamp(newNumValue, min, prevNumVal);
      }

      var newInputValue = inputNumberStepper_1.getDisplayValue(newNumValue);

      if (!inputNumberStepper_1.checkNumStepperValLength(newInputValue)) {
        return;
      }

      setInputValue(newInputValue);
      onChange(newNumValue);
    },
    [inputValue, min, step, onChange, onLeftClick]
  );
  var handleRightClick = react_1.useCallback(
    function () {
      onRightClick();
      var prevNumVal = inputNumberStepper_1.displayValToNumberVal(inputValue);
      var newNumValue = prevNumVal + step;

      if (max) {
        newNumValue = number_1.clamp(newNumValue, prevNumVal, max);
      }

      var newInputValue = inputNumberStepper_1.getDisplayValue(newNumValue);

      if (!inputNumberStepper_1.checkNumStepperValLength(newInputValue)) {
        return;
      }

      setInputValue(newInputValue);
      onChange(newNumValue);
    },
    [inputValue, max, step, onChange, onRightClick]
  ); // Обработка disabled из пропсов и при наличии min/max

  react_1.useEffect(
    function () {
      var allDisabled = disabled === stepper_1.STEPPER_DISABLED.all;
      var val = inputNumberStepper_1.displayValToNumberVal(inputValue);
      setDisabled({
        isAllDisabled: allDisabled,
        isLeftDisabled: allDisabled || disabled === stepper_1.STEPPER_DISABLED.left || val === min,
        isRightDisabled:
          allDisabled || disabled === stepper_1.STEPPER_DISABLED.right || val === max,
      });
      // eslint-disable-next-line react-hooks/exhaustive-deps
    },
    [disabled, inputValue]
  ); // Обработка value из пропсов

  react_1.useEffect(
    function () {
      if (typeof value === 'number' && inputNumberStepper_1.getDisplayValue(value) !== inputValue) {
        var displayValue = inputNumberStepper_1.getDisplayValue(number_1.clamp(value, min, max));
        setInputValue(displayValue);
      } // eslint-disable-next-line react-hooks/exhaustive-deps
    },
    [value]
  ); // Расчет ширины хинта в зависимости от изменения ширины контейнера

  react_1.useEffect(
    function () {
      if (!containerRef.current) {
        return;
      }

      var width = containerRef.current.getBoundingClientRect().width;

      if (hintWidth !== width) {
        setHintWidth(width);
      } // eslint-disable-next-line react-hooks/exhaustive-deps
    },
    [inputValue]
  );
  return react_1.default.createElement(
    react_1.default.Fragment,
    null,
    react_1.default.createElement(
      styles_1.StyledContainer,
      {
        className: className,
        style: style,
        color: baseColorFromProps,
        disabled: isAllDisabled,
        error: error,
        size: size,
        shape: shape,
        isFocused: isFocused,
        ref: containerRef,
        onTouchStart: function_1.noop,
      },
      react_1.default.createElement(
        styles_1.StyledBtn,
        {
          role: 'button',
          color: baseColorFromProps,
          disabled: isLeftDisabled,
          size: size,
          shape: shape,
          order: 0,
          type: 'left',
          onClick: handleLeftClick,
        },
        displayLeftIcon
      ),
      react_1.default.createElement(styles_1.StyledInput, {
        name: name,
        type: 'text',
        color: baseColorFromProps,
        disabled: isAllDisabled,
        shape: shape,
        $stepperSize: size,
        size: inputSize,
        value: inputValue,
        ref: ref,
        onFocus: onFocus,
        onBlur: onBlur,
        onChange: handleChange,
      }),
      react_1.default.createElement(
        styles_1.StyledBtn,
        {
          role: 'button',
          color: baseColorFromProps,
          shape: shape,
          disabled: isRightDisabled,
          size: size,
          order: 2,
          type: 'right',
          onClick: handleRightClick,
        },
        displayRightIcon
      )
    ),
    additionalText
      ? react_1.default.createElement(
          styles_1.StyledHint,
          {
            variant: 'caption',
            error: error,
            width: hintWidth,
            disabled: isAllDisabled,
            shape: shape,
            isStatic: true,
          },
          additionalText
        )
      : null
  );
});

InputNumberStepper.propTypes = {
  /**
   * Устанавливает дополнительные классы для элемента
   */
  className: PropTypes.string,
  /**
   * Задает цвет компонента
   */
  color: PropTypes.oneOf(['primary1', 'primary2', 'secondary1', 'secondary2']),
  /**
   * Задает значение по умолчанию
   * @default 0
   */
  defaultValue: PropTypes.number,
  /**
   * Устанавливает атрибут disabled
   */
  disabled: PropTypes.oneOf(['all', 'left', 'right']),
  /**
   * Устанавливает текст ошибки
   */
  error: PropTypes.string,
  /**
   * Устанавливает пояснительный текст
   */
  hint: PropTypes.string,
  /**
   * Устанавливает кастомную иконку для левой кнопки
   */
  leftIcon: PropTypes.node,
  /**
   * Устанавливает максимальное допустимое значение
   */
  max: PropTypes.number,
  /**
   * Устанавливает минимальное допустимое значение
   */
  min: PropTypes.number,
  /**
   * Устанавливает name
   */
  name: PropTypes.string,
  /**
   * Callback функция, вызываемая при изменении значения
   * @returns {undefined}
   */
  onChange: PropTypes.func,
  /**
   * Callback функция, вызываемая при нажатии на левую кнопку
   * @returns {undefined}
   */
  onLeftClick: PropTypes.func,
  /**
   * Callback функция, вызываемая при нажатии на правую кнопку
   * @returns {undefined}
   */
  onRightClick: PropTypes.func,
  /**
   * Устанавливает кастомную иконку для правой кнопки
   */
  rightIcon: PropTypes.node,
  /**
   * Задает скругление, значение по умолчанию берется из темы
   */
  shape: PropTypes.oneOf(['circular', 'geometric', 'rounded']),
  /**
   * Задает размер компонента
   * @default 'medium'
   */
  size: PropTypes.oneOf(['medium', 'small']),
  /**
   * Задает шаг увеличения/уменьшения значения
   * @default 1
   */
  step: PropTypes.number,
  /**
   * Задает дополнительные стили для компонента
   */
  style: PropTypes.object,
  /**
   * Устанавливает значение для компонента
   */
  value: PropTypes.number,
};

InputNumberStepper.displayName = 'InputNumberStepper';
exports.default = InputNumberStepper;
